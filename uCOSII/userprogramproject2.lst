680x0 MACRO ASSEMBLER   Version 5.00   (c) 1992-2005 Peter J. Fondse

Date: 02 Apr 2023      Time: 20:35:48          Source: C:\IDE68K\UCOSII\USERPROGRAMPROJECT2.SRC

                       1          section   code
                       2   **********************************************************************************************************
                       3   * CSTART.ASM  -  C startup-code
                       4   *
                       5   *          Initialises the system prior to running the users main() program
                       6   *
                       7   *          1) Sets up the user program stack pointer
                       8   *          2) Switches to User mode in the 68000
                       9   *          3) Enables All Interrupts 1-7 on 68000
                      10   *          4) Copies all initialised C program variables from Rom to Ram prior to running main()
                      11   *
                      12   **********************************************************************************************************
00000000              13                   align
                      14   
                      15   
                      16   **********************************************************************************************************
                      17   * The Following ORG Statement marks the address of the start of the this CStart Program
                      18   *
                      19   * The debug Monitor and Flash Load and Program routines assume your program lives here
                      20   **********************************************************************************************************
08000000              21                   org       $08000000
08000000  46FC 2000   22   start:          move.w    #$2000,SR             clear interrupts to enable all, move to supervisor mode
                      23   
                      24   ******************************************************************************************
                      25   * Set unitialised global variables to 0 at startup
                      26   ******************************************************************************************
08000004  207C 0800   27   mainloop        movea.l   #BssStart,a0          point a0 to the start of the initialised data section held in ROM
08000008  1270      
0800000A  203C 0000   28                   move.l    #BssLength,d0         figure out how many bytes of C program variables data to copy
0800000E  0000      
08000010  6700 0024   29                   beq       go_main               if no data to copy go straight to program
08000014  10FC 0000   30   Zeroinit        move.b    #0,(a0)+              copy the C program initialise variables from rom to ram
08000018  5380        31                   subq.l    #1,d0
0800001A  66F8        32                   bne       Zeroinit
                      33   
                      34   *******************************************************************************************
                      35   * last minute initialisation before calling main
                      36   *******************************************************************************************
                      37   
0800001C  23FC FFFF   38                   move.l    #-1,__ungetbuf         required for use of scanf() etc in C programs
08000020  FFFF 0800 
08000024  1258      
08000026  42B9 0800   39                   clr.l     __allocp               used by malloc() in C
0800002A  125C      
0800002C  23FC 0800   40                   move.l    #heap,__heap           pointer to free memory
08000030  1270 0800 
08000034  1260      
08000036  4EB9 0800   41   go_main         jsr       _main
0800003A  064A      
0800003C  60C2        42                   bra       start
                      43   
                      44   ; C:\CPEN412\GITHUB_STEUP\M68KV6.0 - 800BY480\PROGRAMS\DEBUGMONITORCODE\M68KUSERPROGRAM (DE1).C - Compiled by CC68K  Version 5.00 (c) 1991-2005  Peter J. Fondse
                      45   ; #include <stdio.h>
                      46   ; /*********************************************************************************************
                      47   ; **	RS232 port addresses
                      48   ; *********************************************************************************************/
                      49   ; #define RS232_Control *(volatile unsigned char *)(0x00400040)
                      50   ; #define RS232_Status *(volatile unsigned char *)(0x00400040)
                      51   ; #define RS232_TxData *(volatile unsigned char *)(0x00400042)
                      52   ; #define RS232_RxData *(volatile unsigned char *)(0x00400042)
                      53   ; #define RS232_Baud *(volatile unsigned char *)(0x00400044)
                      54   ; /*************************************************************
                      55   ; ** I2C Controller registers
                      56   ; **************************************************************/
                      57   ; #define I2C_PRESCALE_LOW (*(volatile unsigned char *)(0x00408000))
                      58   ; #define I2C_PRESCALE_HIGH (*(volatile unsigned char *)(0x00408002))
                      59   ; #define I2C_CTR (*(volatile unsigned char *)(0x00408004))
                      60   ; #define I2C_TxRx (*(volatile unsigned char *)(0x00408006))
                      61   ; #define I2C_CMDR (*(volatile unsigned char *)(0x00408008))
                      62   ; // Constants specific to EEPROM
                      63   ; #define CTR_BYTE 0x0A
                      64   ; #define B0 0x00
                      65   ; #define A0 0x00
                      66   ; #define A1 0x00
                      67   ; // IIC command register bit masks
                      68   ; #define I2C_CTR_STA 0x80
                      69   ; #define I2C_CTR_STO 0x40
                      70   ; #define I2C_CTR_RD 0x20
                      71   ; #define I2C_CTR_WR 0x10
                      72   ; #define I2C_CTR_ACK 0x08
                      73   ; #define I2C_CTR_IACK 0x01
                      74   ; // IIC status register bit masks
                      75   ; #define IIC_SR_RxAck 0x80
                      76   ; #define IIC_SR_Busy 0x40
                      77   ; #define IIC_SR_AL 0x20
                      78   ; #define IIC_SR_TIP 0x02 // 1 while transferring, 0 when complete
                      79   ; #define IIC_SR_IF 0x01  // poll to see when data is received
                      80   ; /*********************************************************************************************************************************
                      81   ; (( DO NOT initialise global variables here, do it main even if you want 0
                      82   ; (( it's a limitation of the compiler
                      83   ; (( YOU HAVE BEEN WARNED
                      84   ; *********************************************************************************************************************************/
                      85   ; // IIC Function Prototypes
                      86   ; void I2C_Init(void);
                      87   ; void I2C_Start(unsigned char WR_RD);
                      88   ; void I2C_Stop(void);
                      89   ; void WaitForDevice(void);
                      90   ; void TransmitContolByteToEEPROM(unsigned char WE);
                      91   ; void WaitForRxACK(void);
                      92   ; void WaitForSRTIPFlag(void);
                      93   ; void EEPROMWriteByte(unsigned char data, char upper_address, char lower_address);
                      94   ; void WaitForDeviceReadyandAck(void);
                      95   ; void EEPROMReadByte(unsigned char data, unsigned char lower_address);
                      96   ; void EEPROMWritePage(unsigned char data);
                      97   ; void EEPROMReadPage(void);
                      98   ; /*****************************************************************************************
                      99   ; **	Interrupt service routine for Timers
                     100   ; **
                     101   ; **  Timers 1 - 4 share a common IRQ on the CPU  so this function uses polling to figure
                     102   ; **  out which timer is producing the interrupt
                     103   ; **
                     104   ; *****************************************************************************************/
                     105   ; // converts hex char to 4 bit binary equiv in range 0000-1111 (0-F)
                     106   ; // char assumed to be a valid hex char 0-9, a-f, A-F
                     107   ; char xtod(int c)
                     108   ; {
                     109   _xtod:
0800003E  4E56 0000  110          link      A6,#0
08000042  2F02       111          move.l    D2,-(A7)
08000044  242E 0008  112          move.l    8(A6),D2
                     113   ; if ((char)(c) <= (char)('9'))
08000048  0C02 0039  114          cmp.b     #57,D2
0800004C  6E08       115          bgt.s     xtod_1
                     116   ; return c - (char)(0x30);      // 0 - 9 = 0x30 - 0x39 so convert to number by sutracting 0x30
0800004E  1002       117          move.b    D2,D0
08000050  0400 0030  118          sub.b     #48,D0
08000054  6014       119          bra.s     xtod_3
                     120   xtod_1:
                     121   ; else if ((char)(c) > (char)('F')) // assume lower case
08000056  0C02 0046  122          cmp.b     #70,D2
0800005A  6F08       123          ble.s     xtod_4
                     124   ; return c - (char)(0x57);      // a-f = 0x61-66 so needs to be converted to 0x0A - 0x0F so subtract 0x57
0800005C  1002       125          move.b    D2,D0
0800005E  0400 0057  126          sub.b     #87,D0
08000062  6006       127          bra.s     xtod_3
                     128   xtod_4:
                     129   ; else
                     130   ; return c - (char)(0x37); // A-F = 0x41-46 so needs to be converted to 0x0A - 0x0F so subtract 0x37
08000064  1002       131          move.b    D2,D0
08000066  0400 0037  132          sub.b     #55,D0
                     133   xtod_3:
0800006A  241F       134          move.l    (A7)+,D2
0800006C  4E5E       135          unlk      A6
0800006E  4E75       136          rts
                     137   ; }
                     138   ; int Get2HexDigits(char *CheckSumPtr)
                     139   ; {
                     140   _Get2HexDigits:
08000070  4E56 0000  141          link      A6,#0
08000074  2F02       142          move.l    D2,-(A7)
                     143   ; register int i = (xtod(_getch()) << 4) | (xtod(_getch()));
08000076  2F00       144          move.l    D0,-(A7)
08000078  4EB9 0800  145          jsr       __getch
0800007C  017A      
0800007E  2200       146          move.l    D0,D1
08000080  201F       147          move.l    (A7)+,D0
08000082  2F01       148          move.l    D1,-(A7)
08000084  4EB9 0800  149          jsr       _xtod
08000088  003E      
0800008A  584F       150          addq.w    #4,A7
0800008C  C0BC 0000  151          and.l     #255,D0
08000090  00FF      
08000092  E980       152          asl.l     #4,D0
08000094  2F00       153          move.l    D0,-(A7)
08000096  2F01       154          move.l    D1,-(A7)
08000098  4EB9 0800  155          jsr       __getch
0800009C  017A      
0800009E  221F       156          move.l    (A7)+,D1
080000A0  2F00       157          move.l    D0,-(A7)
080000A2  4EB9 0800  158          jsr       _xtod
080000A6  003E      
080000A8  584F       159          addq.w    #4,A7
080000AA  2200       160          move.l    D0,D1
080000AC  201F       161          move.l    (A7)+,D0
080000AE  C2BC 0000  162          and.l     #255,D1
080000B2  00FF      
080000B4  8081       163          or.l      D1,D0
080000B6  2400       164          move.l    D0,D2
                     165   ; if (CheckSumPtr)
080000B8  4AAE 0008  166          tst.l     8(A6)
080000BC  6706       167          beq.s     Get2HexDigits_1
                     168   ; *CheckSumPtr += i;
080000BE  206E 0008  169          move.l    8(A6),A0
080000C2  D510       170          add.b     D2,(A0)
                     171   Get2HexDigits_1:
                     172   ; return i;
080000C4  2002       173          move.l    D2,D0
080000C6  241F       174          move.l    (A7)+,D2
080000C8  4E5E       175          unlk      A6
080000CA  4E75       176          rts
                     177   ; }
                     178   ; int Get4HexDigits(char *CheckSumPtr)
                     179   ; {
                     180   _Get4HexDigits:
080000CC  4E56 0000  181          link      A6,#0
                     182   ; return (Get2HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
080000D0  2F2E 0008  183          move.l    8(A6),-(A7)
080000D4  4EB9 0800  184          jsr       _Get2HexDigits
080000D8  0070      
080000DA  584F       185          addq.w    #4,A7
080000DC  E180       186          asl.l     #8,D0
080000DE  2F00       187          move.l    D0,-(A7)
080000E0  2F2E 0008  188          move.l    8(A6),-(A7)
080000E4  4EB9 0800  189          jsr       _Get2HexDigits
080000E8  0070      
080000EA  584F       190          addq.w    #4,A7
080000EC  2200       191          move.l    D0,D1
080000EE  201F       192          move.l    (A7)+,D0
080000F0  8081       193          or.l      D1,D0
080000F2  4E5E       194          unlk      A6
080000F4  4E75       195          rts
                     196   ; }
                     197   ; int Get6HexDigits(char *CheckSumPtr)
                     198   ; {
                     199   _Get6HexDigits:
080000F6  4E56 0000  200          link      A6,#0
                     201   ; return (Get4HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
080000FA  2F2E 0008  202          move.l    8(A6),-(A7)
080000FE  4EB9 0800  203          jsr       _Get4HexDigits
08000102  00CC      
08000104  584F       204          addq.w    #4,A7
08000106  E180       205          asl.l     #8,D0
08000108  2F00       206          move.l    D0,-(A7)
0800010A  2F2E 0008  207          move.l    8(A6),-(A7)
0800010E  4EB9 0800  208          jsr       _Get2HexDigits
08000112  0070      
08000114  584F       209          addq.w    #4,A7
08000116  2200       210          move.l    D0,D1
08000118  201F       211          move.l    (A7)+,D0
0800011A  8081       212          or.l      D1,D0
0800011C  4E5E       213          unlk      A6
0800011E  4E75       214          rts
                     215   ; }
                     216   ; int Get8HexDigits(char *CheckSumPtr)
                     217   ; {
                     218   _Get8HexDigits:
08000120  4E56 0000  219          link      A6,#0
                     220   ; return (Get4HexDigits(CheckSumPtr) << 16) | (Get4HexDigits(CheckSumPtr));
08000124  2F2E 0008  221          move.l    8(A6),-(A7)
08000128  4EB9 0800  222          jsr       _Get4HexDigits
0800012C  00CC      
0800012E  584F       223          addq.w    #4,A7
08000130  E180       224          asl.l     #8,D0
08000132  E180       225          asl.l     #8,D0
08000134  2F00       226          move.l    D0,-(A7)
08000136  2F2E 0008  227          move.l    8(A6),-(A7)
0800013A  4EB9 0800  228          jsr       _Get4HexDigits
0800013E  00CC      
08000140  584F       229          addq.w    #4,A7
08000142  2200       230          move.l    D0,D1
08000144  201F       231          move.l    (A7)+,D0
08000146  8081       232          or.l      D1,D0
08000148  4E5E       233          unlk      A6
0800014A  4E75       234          rts
                     235   ; }
                     236   ; int _putch( int c)
                     237   ; {
                     238   __putch:
0800014C  4E56 0000  239          link      A6,#0
                     240   ; while((RS232_Status & (char)(0x02)) != (char)(0x02))    // wait for Tx bit in status register or 6850 serial comms chip to be '1'
                     241   _putch_1:
08000150  1039 0040  242          move.b    4194368,D0
08000154  0040      
08000156  C03C 0002  243          and.b     #2,D0
0800015A  0C00 0002  244          cmp.b     #2,D0
0800015E  6702       245          beq.s     _putch_3
08000160  60EE       246          bra       _putch_1
                     247   _putch_3:
                     248   ; ;
                     249   ; RS232_TxData = (c & (char)(0x7f));                      // write to the data register to output the character (mask off bit 8 to keep it 7 bit ASCII)
08000162  202E 0008  250          move.l    8(A6),D0
08000166  C0BC 0000  251          and.l     #127,D0
0800016A  007F      
0800016C  13C0 0040  252          move.b    D0,4194370
08000170  0042      
                     253   ; return c ;                                              // putchar() expects the character to be returned
08000172  202E 0008  254          move.l    8(A6),D0
08000176  4E5E       255          unlk      A6
08000178  4E75       256          rts
                     257   ; }
                     258   ; /*********************************************************************************************************
                     259   ; **  Subroutine to provide a low level input function to 6850 ACIA
                     260   ; **  This routine provides the basic functionality to input a single character from the serial Port
                     261   ; **  to allow the board to communicate with HyperTerminal Program Keyboard (your PC)
                     262   ; **
                     263   ; **  NOTE you do not call this function directly, instead you call the normal getchar() function
                     264   ; **  which in turn calls _getch() below). Other functions like gets(), scanf() call getchar() so will
                     265   ; **  call _getch() also
                     266   ; *********************************************************************************************************/
                     267   ; int _getch( void )
                     268   ; {
                     269   __getch:
0800017A  4E56 FFFC  270          link      A6,#-4
                     271   ; char c ;
                     272   ; while((RS232_Status & (char)(0x01)) != (char)(0x01))    // wait for Rx bit in 6850 serial comms chip status register to be '1'
                     273   _getch_1:
0800017E  1039 0040  274          move.b    4194368,D0
08000182  0040      
08000184  C03C 0001  275          and.b     #1,D0
08000188  0C00 0001  276          cmp.b     #1,D0
0800018C  6702       277          beq.s     _getch_3
0800018E  60EE       278          bra       _getch_1
                     279   _getch_3:
                     280   ; ;
                     281   ; return (RS232_RxData & (char)(0x7f));                   // read received character, mask off top bit and return as 7 bit ASCII character
08000190  1039 0040  282          move.b    4194370,D0
08000194  0042      
08000196  C0BC 0000  283          and.l     #255,D0
0800019A  00FF      
0800019C  C0BC 0000  284          and.l     #127,D0
080001A0  007F      
080001A2  4E5E       285          unlk      A6
080001A4  4E75       286          rts
                     287   ; }
                     288   ; void I2C_Start(unsigned char WR_RD)
                     289   ; {
                     290   _I2C_Start:
080001A6  4E56 0000  291          link      A6,#0
                     292   ; I2C_CMDR = I2C_CTR_STA | WR_RD ;
080001AA  303C 0080  293          move.w    #128,D0
080001AE  122E 000B  294          move.b    11(A6),D1
080001B2  C27C 00FF  295          and.w     #255,D1
080001B6  8041       296          or.w      D1,D0
080001B8  13C0 0040  297          move.b    D0,4227080
080001BC  8008      
080001BE  4E5E       298          unlk      A6
080001C0  4E75       299          rts
                     300   ; }
                     301   ; void I2C_Stop(void)
                     302   ; {
                     303   _I2C_Stop:
                     304   ; I2C_CMDR = I2C_CTR_STO;
080001C2  13FC 0040  305          move.b    #64,4227080
080001C6  0040 8008 
080001CA  4E75       306          rts
                     307   ; }
                     308   ; void I2C_Init(void)
                     309   ; {
                     310   _I2C_Init:
                     311   ; // Make sure I2C core is off before adjusting soft core clock
                     312   ; I2C_CTR = 0x00;
080001CC  4239 0040  313          clr.b     4227076
080001D0  8004      
                     314   ; // Set SCL frequency to 100kHz
                     315   ; I2C_PRESCALE_LOW = 0x31;
080001D2  13FC 0031  316          move.b    #49,4227072
080001D6  0040 8000 
                     317   ; I2C_PRESCALE_HIGH = 0x00;
080001DA  4239 0040  318          clr.b     4227074
080001DE  8002      
                     319   ; // Enable core and disable interrupts
                     320   ; I2C_CTR = (I2C_CTR & 0x3F) | (1 << 7);
080001E0  1039 0040  321          move.b    4227076,D0
080001E4  8004      
080001E6  C03C 003F  322          and.b     #63,D0
080001EA  803C 0080  323          or.b      #128,D0
080001EE  13C0 0040  324          move.b    D0,4227076
080001F2  8004      
080001F4  4E75       325          rts
                     326   ; }
                     327   ; void TransmitByte(unsigned char data)
                     328   ; {
                     329   _TransmitByte:
080001F6  4E56 0000  330          link      A6,#0
                     331   ; I2C_TxRx = data;
080001FA  13EE 000B  332          move.b    11(A6),4227078
080001FE  0040 8006 
08000202  4E5E       333          unlk      A6
08000204  4E75       334          rts
                     335   ; }
                     336   ; void TransmitContolByteToEEPROM(unsigned char WE)
                     337   ; {
                     338   _TransmitContolByteToEEPROM:
08000206  4E56 0000  339          link      A6,#0
                     340   ; TransmitByte((CTR_BYTE << 4) | (B0 << 3) | (A1 << 2) | (A0 << 1) | WE);
0800020A  323C 00A0  341          move.w    #160,D1
0800020E  822E 000B  342          or.b      11(A6),D1
08000212  C2BC 0000  343          and.l     #255,D1
08000216  00FF      
08000218  2F01       344          move.l    D1,-(A7)
0800021A  4EB9 0800  345          jsr       _TransmitByte
0800021E  01F6      
08000220  584F       346          addq.w    #4,A7
08000222  4E5E       347          unlk      A6
08000224  4E75       348          rts
                     349   ; }
                     350   ; void WaitForRxACK(void)
                     351   ; {
                     352   _WaitForRxACK:
                     353   ; // Status Register [7] == 0
                     354   ; while (I2C_CMDR & 0x80);
                     355   WaitForRxACK_1:
08000226  1039 0040  356          move.b    4227080,D0
0800022A  8008      
0800022C  C07C 00FF  357          and.w     #255,D0
08000230  C07C 0080  358          and.w     #128,D0
08000234  6702       359          beq.s     WaitForRxACK_3
08000236  60EE       360          bra       WaitForRxACK_1
                     361   WaitForRxACK_3:
08000238  4E75       362          rts
                     363   ; }
                     364   ; void WaitForDevice(void)
                     365   ; {
                     366   _WaitForDevice:
                     367   ; // Status Register bits 7,6,1,0 should be 0
                     368   ; while (I2C_CMDR & 0xC2);
                     369   WaitForDevice_1:
0800023A  1039 0040  370          move.b    4227080,D0
0800023E  8008      
08000240  C07C 00FF  371          and.w     #255,D0
08000244  C07C 00C2  372          and.w     #194,D0
08000248  6702       373          beq.s     WaitForDevice_3
0800024A  60EE       374          bra       WaitForDevice_1
                     375   WaitForDevice_3:
0800024C  4E75       376          rts
                     377   ; }
                     378   ; void WaitForSRTIPFlag(void) {
                     379   _WaitForSRTIPFlag:
                     380   ; while (I2C_CMDR & IIC_SR_TIP);
                     381   WaitForSRTIPFlag_1:
0800024E  1039 0040  382          move.b    4227080,D0
08000252  8008      
08000254  C03C 0002  383          and.b     #2,D0
08000258  6702       384          beq.s     WaitForSRTIPFlag_3
0800025A  60F2       385          bra       WaitForSRTIPFlag_1
                     386   WaitForSRTIPFlag_3:
0800025C  4E75       387          rts
                     388   ; }
                     389   ; void WaitForDeviceReadyandAck(void)
                     390   ; {
                     391   _WaitForDeviceReadyandAck:
                     392   ; WaitForDevice();
0800025E  4EB9 0800  393          jsr       _WaitForDevice
08000262  023A      
                     394   ; WaitForRxACK();
08000264  4EB9 0800  395          jsr       _WaitForRxACK
08000268  0226      
0800026A  4E75       396          rts
                     397   ; }
                     398   ; void EEPROMWriteByte(unsigned char data, char upper_address, char lower_address)
                     399   ; {
                     400   _EEPROMWriteByte:
0800026C  4E56 0000  401          link      A6,#0
08000270  48E7 003C  402          movem.l   A2/A3/A4/A5,-(A7)
08000274  45F9 0800  403          lea       _WaitForRxACK.L,A2
08000278  0226      
0800027A  47F9 0800  404          lea       _WaitForSRTIPFlag.L,A3
0800027E  024E      
08000280  49F9 0800  405          lea       _printf.L,A4
08000284  069C      
08000286  4BF9 0800  406          lea       _TransmitByte.L,A5
0800028A  01F6      
                     407   ; printf("\r\nDevice is not ready");
0800028C  4879 0800  408          pea       @m68kus~1_1.L
08000290  1138      
08000292  4E94       409          jsr       (A4)
08000294  584F       410          addq.w    #4,A7
                     411   ; WaitForDevice();
08000296  4EB9 0800  412          jsr       _WaitForDevice
0800029A  023A      
                     413   ; printf("\r\nDevice is ready");
0800029C  4879 0800  414          pea       @m68kus~1_2.L
080002A0  114E      
080002A2  4E94       415          jsr       (A4)
080002A4  584F       416          addq.w    #4,A7
                     417   ; TransmitContolByteToEEPROM(0x00);
080002A6  42A7       418          clr.l     -(A7)
080002A8  4EB9 0800  419          jsr       _TransmitContolByteToEEPROM
080002AC  0206      
080002AE  584F       420          addq.w    #4,A7
                     421   ; I2C_CMDR =  I2C_CTR_STA | I2C_CTR_WR | I2C_CTR_IACK;
080002B0  13FC 0091  422          move.b    #145,4227080
080002B4  0040 8008 
                     423   ; // I2C_CMDR = 0X91;
                     424   ; WaitForSRTIPFlag();
080002B8  4E93       425          jsr       (A3)
                     426   ; WaitForRxACK();
080002BA  4E92       427          jsr       (A2)
                     428   ; printf("\r\n Sent control byte");
080002BC  4879 0800  429          pea       @m68kus~1_3.L
080002C0  1160      
080002C2  4E94       430          jsr       (A4)
080002C4  584F       431          addq.w    #4,A7
                     432   ; // Transmit EEPROM internal address, high byte followed by low byte
                     433   ; TransmitByte(upper_address);
080002C6  122E 000F  434          move.b    15(A6),D1
080002CA  C2BC 0000  435          and.l     #255,D1
080002CE  00FF      
080002D0  2F01       436          move.l    D1,-(A7)
080002D2  4E95       437          jsr       (A5)
080002D4  584F       438          addq.w    #4,A7
                     439   ; I2C_CMDR = I2C_CTR_WR | I2C_CTR_IACK;
080002D6  13FC 0011  440          move.b    #17,4227080
080002DA  0040 8008 
                     441   ; //I2C_CMDR = 0x11;
                     442   ; WaitForSRTIPFlag();
080002DE  4E93       443          jsr       (A3)
                     444   ; WaitForRxACK();
080002E0  4E92       445          jsr       (A2)
                     446   ; TransmitByte(lower_address);
080002E2  122E 0013  447          move.b    19(A6),D1
080002E6  C2BC 0000  448          and.l     #255,D1
080002EA  00FF      
080002EC  2F01       449          move.l    D1,-(A7)
080002EE  4E95       450          jsr       (A5)
080002F0  584F       451          addq.w    #4,A7
                     452   ; I2C_CMDR = I2C_CTR_WR | I2C_CTR_IACK;
080002F2  13FC 0011  453          move.b    #17,4227080
080002F6  0040 8008 
                     454   ; // I2C_CMDR = 0x11;
                     455   ; WaitForSRTIPFlag();
080002FA  4E93       456          jsr       (A3)
                     457   ; WaitForRxACK();
080002FC  4E92       458          jsr       (A2)
                     459   ; printf("\r\n Sent address bytes");
080002FE  4879 0800  460          pea       @m68kus~1_4.L
08000302  1176      
08000304  4E94       461          jsr       (A4)
08000306  584F       462          addq.w    #4,A7
                     463   ; // Transmit byte to be written in EEPROM
                     464   ; TransmitByte(data);
08000308  122E 000B  465          move.b    11(A6),D1
0800030C  C2BC 0000  466          and.l     #255,D1
08000310  00FF      
08000312  2F01       467          move.l    D1,-(A7)
08000314  4E95       468          jsr       (A5)
08000316  584F       469          addq.w    #4,A7
                     470   ; I2C_CMDR = I2C_CTR_STO | I2C_CTR_WR | I2C_CTR_IACK;
08000318  13FC 0051  471          move.b    #81,4227080
0800031C  0040 8008 
                     472   ; WaitForSRTIPFlag();
08000320  4E93       473          jsr       (A3)
                     474   ; WaitForRxACK();
08000322  4E92       475          jsr       (A2)
08000324  4CDF 3C00  476          movem.l   (A7)+,A2/A3/A4/A5
08000328  4E5E       477          unlk      A6
0800032A  4E75       478          rts
                     479   ; }
                     480   ; int I2C_Check_Read(void) {
                     481   _I2C_Check_Read:
0800032C  4E56 FFFC  482          link      A6,#-4
                     483   ; int value = I2C_CTR;
08000330  1039 0040  484          move.b    4227076,D0
08000334  8004      
08000336  C0BC 0000  485          and.l     #255,D0
0800033A  00FF      
0800033C  2D40 FFFC  486          move.l    D0,-4(A6)
                     487   ; return ((value & 0x01) == 0x01);
08000340  202E FFFC  488          move.l    -4(A6),D0
08000344  C0BC 0000  489          and.l     #1,D0
08000348  0001      
0800034A  0C80 0000  490          cmp.l     #1,D0
0800034E  0001      
08000350  6604       491          bne.s     I2C_Check_Read_1
08000352  7001       492          moveq     #1,D0
08000354  6002       493          bra.s     I2C_Check_Read_2
                     494   I2C_Check_Read_1:
08000356  4280       495          clr.l     D0
                     496   I2C_Check_Read_2:
08000358  4E5E       497          unlk      A6
0800035A  4E75       498          rts
                     499   ; }
                     500   ; void WaitForI2CRead(void) {
                     501   _WaitForI2CRead:
                     502   ; while (I2C_Check_Read() == 0) {
                     503   WaitForI2CRead_1:
0800035C  4EB9 0800  504          jsr       _I2C_Check_Read
08000360  032C      
08000362  4A80       505          tst.l     D0
08000364  6602       506          bne.s     WaitForI2CRead_3
                     507   ; //do nothing
                     508   ; }
08000366  60F4       509          bra       WaitForI2CRead_1
                     510   WaitForI2CRead_3:
08000368  4E75       511          rts
                     512   ; }
                     513   ; void EEPROMReadByte(unsigned char upper_address, unsigned char lower_address)
                     514   ; {
                     515   _EEPROMReadByte:
0800036A  4E56 FFFC  516          link      A6,#-4
0800036E  48E7 0038  517          movem.l   A2/A3/A4,-(A7)
08000372  45F9 0800  518          lea       _printf.L,A2
08000376  069C      
08000378  47F9 0800  519          lea       _WaitForSRTIPFlag.L,A3
0800037C  024E      
0800037E  49F9 0800  520          lea       _WaitForRxACK.L,A4
08000382  0226      
                     521   ; unsigned char byteRead;
                     522   ; // Check that the SPI bus is not busy
                     523   ; printf("\r\nDevice not ready");
08000384  4879 0800  524          pea       @m68kus~1_5.L
08000388  118C      
0800038A  4E92       525          jsr       (A2)
0800038C  584F       526          addq.w    #4,A7
                     527   ; WaitForDevice(); // only check the busy bit
0800038E  4EB9 0800  528          jsr       _WaitForDevice
08000392  023A      
                     529   ; printf("\r\nDevice ready");
08000394  4879 0800  530          pea       @m68kus~1_6.L
08000398  11A0      
0800039A  4E92       531          jsr       (A2)
0800039C  584F       532          addq.w    #4,A7
                     533   ; // Transmit Control Byte
                     534   ; TransmitContolByteToEEPROM(0x00);
0800039E  42A7       535          clr.l     -(A7)
080003A0  4EB9 0800  536          jsr       _TransmitContolByteToEEPROM
080003A4  0206      
080003A6  584F       537          addq.w    #4,A7
                     538   ; // 0x91
                     539   ; I2C_CMDR = I2C_CTR_STA | I2C_CTR_WR | I2C_CTR_IACK;
080003A8  13FC 0091  540          move.b    #145,4227080
080003AC  0040 8008 
                     541   ; printf("\r\n I2C_CMDR: 0x02", I2C_CMDR);
080003B0  1239 0040  542          move.b    4227080,D1
080003B4  8008      
080003B6  C2BC 0000  543          and.l     #255,D1
080003BA  00FF      
080003BC  2F01       544          move.l    D1,-(A7)
080003BE  4879 0800  545          pea       @m68kus~1_7.L
080003C2  11B0      
080003C4  4E92       546          jsr       (A2)
080003C6  504F       547          addq.w    #8,A7
                     548   ; WaitForSRTIPFlag();
080003C8  4E93       549          jsr       (A3)
                     550   ; WaitForRxACK();
080003CA  4E94       551          jsr       (A4)
                     552   ; printf("\r\nSent Control byte");
080003CC  4879 0800  553          pea       @m68kus~1_8.L
080003D0  11C2      
080003D2  4E92       554          jsr       (A2)
080003D4  584F       555          addq.w    #4,A7
                     556   ; // Transmit EEPROM internal address, high byte followed by low byte
                     557   ; TransmitByte(upper_address);
080003D6  122E 000B  558          move.b    11(A6),D1
080003DA  C2BC 0000  559          and.l     #255,D1
080003DE  00FF      
080003E0  2F01       560          move.l    D1,-(A7)
080003E2  4EB9 0800  561          jsr       _TransmitByte
080003E6  01F6      
080003E8  584F       562          addq.w    #4,A7
                     563   ; I2C_CMDR = I2C_CTR_WR | I2C_CTR_IACK;
080003EA  13FC 0011  564          move.b    #17,4227080
080003EE  0040 8008 
                     565   ; WaitForSRTIPFlag();
080003F2  4E93       566          jsr       (A3)
                     567   ; WaitForRxACK();
080003F4  4E94       568          jsr       (A4)
                     569   ; printf("\r\nSent 1st address");
080003F6  4879 0800  570          pea       @m68kus~1_9.L
080003FA  11D6      
080003FC  4E92       571          jsr       (A2)
080003FE  584F       572          addq.w    #4,A7
                     573   ; TransmitByte(lower_address);
08000400  122E 000F  574          move.b    15(A6),D1
08000404  C2BC 0000  575          and.l     #255,D1
08000408  00FF      
0800040A  2F01       576          move.l    D1,-(A7)
0800040C  4EB9 0800  577          jsr       _TransmitByte
08000410  01F6      
08000412  584F       578          addq.w    #4,A7
                     579   ; I2C_CMDR = I2C_CTR_WR | I2C_CTR_IACK;
08000414  13FC 0011  580          move.b    #17,4227080
08000418  0040 8008 
                     581   ; WaitForSRTIPFlag();
0800041C  4E93       582          jsr       (A3)
                     583   ; WaitForRxACK();
0800041E  4E94       584          jsr       (A4)
                     585   ; printf("\r\nSent 2nd address");
08000420  4879 0800  586          pea       @m68kus~1_10.L
08000424  11EA      
08000426  4E92       587          jsr       (A2)
08000428  584F       588          addq.w    #4,A7
                     589   ; // Send repeated start and control byte with RD flag set
                     590   ; TransmitContolByteToEEPROM(0x01);
0800042A  4878 0001  591          pea       1
0800042E  4EB9 0800  592          jsr       _TransmitContolByteToEEPROM
08000432  0206      
08000434  584F       593          addq.w    #4,A7
                     594   ; /**I2C_CMDR = I2C_CTR_STA | I2C_CTR_WR | I2C_CTR_IACK;
                     595   ; //I2C_CMDR = 0x69;
                     596   ; WaitForSRTIPFlag();
                     597   ; WaitForRxACK();
                     598   ; printf("\r\nSent second control byte");**/
                     599   ; I2C_CMDR = I2C_CTR_STO | I2C_CTR_RD | I2C_CTR_IACK;
08000436  13FC 0061  600          move.b    #97,4227080
0800043A  0040 8008 
                     601   ; WaitForSRTIPFlag();
0800043E  4E93       602          jsr       (A3)
                     603   ; byteRead = I2C_TxRx;
08000440  1D79 0040  604          move.b    4227078,-1(A6)
08000444  8006 FFFF 
                     605   ; printf("\r\nRead: %02x from address %02x\r\n", byteRead, lower_address);
08000448  122E 000F  606          move.b    15(A6),D1
0800044C  C2BC 0000  607          and.l     #255,D1
08000450  00FF      
08000452  2F01       608          move.l    D1,-(A7)
08000454  122E FFFF  609          move.b    -1(A6),D1
08000458  C2BC 0000  610          and.l     #255,D1
0800045C  00FF      
0800045E  2F01       611          move.l    D1,-(A7)
08000460  4879 0800  612          pea       @m68kus~1_11.L
08000464  11FE      
08000466  4E92       613          jsr       (A2)
08000468  DEFC 000C  614          add.w     #12,A7
                     615   ; I2C_CMDR = I2C_CTR_STO;
0800046C  13FC 0040  616          move.b    #64,4227080
08000470  0040 8008 
08000474  4CDF 1C00  617          movem.l   (A7)+,A2/A3/A4
08000478  4E5E       618          unlk      A6
0800047A  4E75       619          rts
                     620   ; }
                     621   ; void EEPROMWritePage(unsigned char data) {
                     622   _EEPROMWritePage:
0800047C  4E56 0000  623          link      A6,#0
08000480  48E7 203C  624          movem.l   D2/A2/A3/A4/A5,-(A7)
08000484  45F9 0800  625          lea       _printf.L,A2
08000488  069C      
0800048A  47F9 0800  626          lea       _WaitForRxACK.L,A3
0800048E  0226      
08000490  49F9 0800  627          lea       _WaitForSRTIPFlag.L,A4
08000494  024E      
08000496  4BF9 0800  628          lea       _TransmitByte.L,A5
0800049A  01F6      
                     629   ; unsigned char i;
                     630   ; // Check that the SPI bus is not busy
                     631   ; printf("\r\nDevice is not ready");
0800049C  4879 0800  632          pea       @m68kus~1_1.L
080004A0  1138      
080004A2  4E92       633          jsr       (A2)
080004A4  584F       634          addq.w    #4,A7
                     635   ; WaitForDevice();
080004A6  4EB9 0800  636          jsr       _WaitForDevice
080004AA  023A      
                     637   ; printf("\r\nDevice is ready");
080004AC  4879 0800  638          pea       @m68kus~1_2.L
080004B0  114E      
080004B2  4E92       639          jsr       (A2)
080004B4  584F       640          addq.w    #4,A7
                     641   ; TransmitContolByteToEEPROM(0x00);
080004B6  42A7       642          clr.l     -(A7)
080004B8  4EB9 0800  643          jsr       _TransmitContolByteToEEPROM
080004BC  0206      
080004BE  584F       644          addq.w    #4,A7
                     645   ; I2C_CMDR =  I2C_CTR_STA | I2C_CTR_WR | I2C_CTR_IACK;
080004C0  13FC 0091  646          move.b    #145,4227080
080004C4  0040 8008 
                     647   ; // I2C_CMDR = 0X91;
                     648   ; WaitForSRTIPFlag();
080004C8  4E94       649          jsr       (A4)
                     650   ; WaitForRxACK();
080004CA  4E93       651          jsr       (A3)
                     652   ; printf("\r\n Sent control byte");
080004CC  4879 0800  653          pea       @m68kus~1_3.L
080004D0  1160      
080004D2  4E92       654          jsr       (A2)
080004D4  584F       655          addq.w    #4,A7
                     656   ; // Transmit EEPROM internal address, high byte followed by low byte
                     657   ; TransmitByte(0x00);
080004D6  42A7       658          clr.l     -(A7)
080004D8  4E95       659          jsr       (A5)
080004DA  584F       660          addq.w    #4,A7
                     661   ; I2C_CMDR = I2C_CTR_WR | I2C_CTR_IACK;
080004DC  13FC 0011  662          move.b    #17,4227080
080004E0  0040 8008 
                     663   ; //I2C_CMDR = 0x11;
                     664   ; WaitForSRTIPFlag();
080004E4  4E94       665          jsr       (A4)
                     666   ; WaitForRxACK();
080004E6  4E93       667          jsr       (A3)
                     668   ; TransmitByte(0x00);
080004E8  42A7       669          clr.l     -(A7)
080004EA  4E95       670          jsr       (A5)
080004EC  584F       671          addq.w    #4,A7
                     672   ; I2C_CMDR = I2C_CTR_WR | I2C_CTR_IACK;
080004EE  13FC 0011  673          move.b    #17,4227080
080004F2  0040 8008 
                     674   ; // I2C_CMDR = 0x11;
                     675   ; WaitForSRTIPFlag();
080004F6  4E94       676          jsr       (A4)
                     677   ; WaitForRxACK();
080004F8  4E93       678          jsr       (A3)
                     679   ; printf("\r\n Sent address bytes");
080004FA  4879 0800  680          pea       @m68kus~1_4.L
080004FE  1176      
08000500  4E92       681          jsr       (A2)
08000502  584F       682          addq.w    #4,A7
                     683   ; // Transmit bytes to be written in EEPROM
                     684   ; // 128 bytes
                     685   ; for (i = 0x0; i < 0x80; i++) {
08000504  4202       686          clr.b     D2
                     687   EEPROMWritePage_1:
08000506  C47C 00FF  688          and.w     #255,D2
0800050A  0C42 0080  689          cmp.w     #128,D2
0800050E  641C       690          bhs.s     EEPROMWritePage_3
                     691   ; // Transmit byte to be written in EEPROM
                     692   ; TransmitByte(i);
08000510  C4BC 0000  693          and.l     #255,D2
08000514  00FF      
08000516  2F02       694          move.l    D2,-(A7)
08000518  4E95       695          jsr       (A5)
0800051A  584F       696          addq.w    #4,A7
                     697   ; I2C_CMDR = I2C_CTR_WR | I2C_CTR_IACK;
0800051C  13FC 0011  698          move.b    #17,4227080
08000520  0040 8008 
                     699   ; WaitForRxACK();
08000524  4E93       700          jsr       (A3)
                     701   ; WaitForSRTIPFlag();
08000526  4E94       702          jsr       (A4)
08000528  5202       703          addq.b    #1,D2
0800052A  60DA       704          bra       EEPROMWritePage_1
                     705   EEPROMWritePage_3:
                     706   ; }
                     707   ; I2C_CMDR = I2C_CTR_STO | I2C_CTR_WR | I2C_CTR_IACK;
0800052C  13FC 0051  708          move.b    #81,4227080
08000530  0040 8008 
                     709   ; printf("\r\n Sent stop command");
08000534  4879 0800  710          pea       @m68kus~1_12.L
08000538  1220      
0800053A  4E92       711          jsr       (A2)
0800053C  584F       712          addq.w    #4,A7
0800053E  4CDF 3C04  713          movem.l   (A7)+,D2/A2/A3/A4/A5
08000542  4E5E       714          unlk      A6
08000544  4E75       715          rts
                     716   ; }
                     717   ; void EEPROMReadPage() {
                     718   _EEPROMReadPage:
08000546  4E56 FFFC  719          link      A6,#-4
0800054A  48E7 2038  720          movem.l   D2/A2/A3/A4,-(A7)
0800054E  45F9 0800  721          lea       _printf.L,A2
08000552  069C      
08000554  47F9 0800  722          lea       _WaitForRxACK.L,A3
08000558  0226      
0800055A  49F9 0800  723          lea       _WaitForSRTIPFlag.L,A4
0800055E  024E      
                     724   ; unsigned char i;
                     725   ; unsigned char byteRead;
                     726   ; // Check that the SPI bus is not busy
                     727   ; printf("\r\nDevice not ready");
08000560  4879 0800  728          pea       @m68kus~1_5.L
08000564  118C      
08000566  4E92       729          jsr       (A2)
08000568  584F       730          addq.w    #4,A7
                     731   ; WaitForDevice();
0800056A  4EB9 0800  732          jsr       _WaitForDevice
0800056E  023A      
                     733   ; printf("\r\nDevice ready");
08000570  4879 0800  734          pea       @m68kus~1_6.L
08000574  11A0      
08000576  4E92       735          jsr       (A2)
08000578  584F       736          addq.w    #4,A7
                     737   ; // Transmit Control Byte
                     738   ; TransmitContolByteToEEPROM(0x00);
0800057A  42A7       739          clr.l     -(A7)
0800057C  4EB9 0800  740          jsr       _TransmitContolByteToEEPROM
08000580  0206      
08000582  584F       741          addq.w    #4,A7
                     742   ; I2C_CMDR = I2C_CTR_STA | I2C_CTR_WR | I2C_CTR_IACK;
08000584  13FC 0091  743          move.b    #145,4227080
08000588  0040 8008 
                     744   ; WaitForSRTIPFlag();
0800058C  4E94       745          jsr       (A4)
                     746   ; WaitForRxACK();
0800058E  4E93       747          jsr       (A3)
                     748   ; printf("\r\nSent Control byte");
08000590  4879 0800  749          pea       @m68kus~1_8.L
08000594  11C2      
08000596  4E92       750          jsr       (A2)
08000598  584F       751          addq.w    #4,A7
                     752   ; // Transmit EEPROM internal address, high byte followed by low byte
                     753   ; TransmitByte(0x00);
0800059A  42A7       754          clr.l     -(A7)
0800059C  4EB9 0800  755          jsr       _TransmitByte
080005A0  01F6      
080005A2  584F       756          addq.w    #4,A7
                     757   ; I2C_CMDR = I2C_CTR_WR | I2C_CTR_IACK;
080005A4  13FC 0011  758          move.b    #17,4227080
080005A8  0040 8008 
                     759   ; WaitForSRTIPFlag();
080005AC  4E94       760          jsr       (A4)
                     761   ; WaitForRxACK();
080005AE  4E93       762          jsr       (A3)
                     763   ; printf("\r\nSent 1st address");
080005B0  4879 0800  764          pea       @m68kus~1_9.L
080005B4  11D6      
080005B6  4E92       765          jsr       (A2)
080005B8  584F       766          addq.w    #4,A7
                     767   ; TransmitByte(0x00);
080005BA  42A7       768          clr.l     -(A7)
080005BC  4EB9 0800  769          jsr       _TransmitByte
080005C0  01F6      
080005C2  584F       770          addq.w    #4,A7
                     771   ; I2C_CMDR = I2C_CTR_WR | I2C_CTR_IACK;
080005C4  13FC 0011  772          move.b    #17,4227080
080005C8  0040 8008 
                     773   ; WaitForSRTIPFlag();
080005CC  4E94       774          jsr       (A4)
                     775   ; WaitForRxACK();
080005CE  4E93       776          jsr       (A3)
                     777   ; printf("\r\nSent 2nd address");
080005D0  4879 0800  778          pea       @m68kus~1_10.L
080005D4  11EA      
080005D6  4E92       779          jsr       (A2)
080005D8  584F       780          addq.w    #4,A7
                     781   ; // Send repeated start and control byte with RD flag set
                     782   ; TransmitContolByteToEEPROM(0x01);
080005DA  4878 0001  783          pea       1
080005DE  4EB9 0800  784          jsr       _TransmitContolByteToEEPROM
080005E2  0206      
080005E4  584F       785          addq.w    #4,A7
                     786   ; I2C_CMDR = I2C_CTR_STA | I2C_CTR_WR | I2C_CTR_IACK;
080005E6  13FC 0091  787          move.b    #145,4227080
080005EA  0040 8008 
                     788   ; //I2C_CMDR = 0x69;
                     789   ; WaitForSRTIPFlag();
080005EE  4E94       790          jsr       (A4)
                     791   ; WaitForRxACK();
080005F0  4E93       792          jsr       (A3)
                     793   ; printf("\r\nSent second control byte\n");
080005F2  4879 0800  794          pea       @m68kus~1_13.L
080005F6  1236      
080005F8  4E92       795          jsr       (A2)
080005FA  584F       796          addq.w    #4,A7
                     797   ; for (i = 0x0; i < 0x08; i++)
080005FC  4202       798          clr.b     D2
                     799   EEPROMReadPage_1:
080005FE  0C02 0008  800          cmp.b     #8,D2
08000602  6436       801          bhs.s     EEPROMReadPage_3
                     802   ; {
                     803   ; I2C_CMDR = I2C_CTR_RD | I2C_CTR_ACK | I2C_CTR_IACK;
08000604  13FC 0029  804          move.b    #41,4227080
08000608  0040 8008 
                     805   ; WaitForSRTIPFlag();
0800060C  4E94       806          jsr       (A4)
                     807   ; I2C_CMDR = I2C_CTR_RD | I2C_CTR_ACK | I2C_CTR_IACK;
0800060E  13FC 0029  808          move.b    #41,4227080
08000612  0040 8008 
                     809   ; WaitForRxACK();
08000616  4E93       810          jsr       (A3)
                     811   ; byteRead = I2C_TxRx;
08000618  1D79 0040  812          move.b    4227078,-1(A6)
0800061C  8006 FFFF 
                     813   ; printf("%02x ", byteRead);
08000620  122E FFFF  814          move.b    -1(A6),D1
08000624  C2BC 0000  815          and.l     #255,D1
08000628  00FF      
0800062A  2F01       816          move.l    D1,-(A7)
0800062C  4879 0800  817          pea       @m68kus~1_14.L
08000630  1252      
08000632  4E92       818          jsr       (A2)
08000634  504F       819          addq.w    #8,A7
08000636  5202       820          addq.b    #1,D2
08000638  60C4       821          bra       EEPROMReadPage_1
                     822   EEPROMReadPage_3:
                     823   ; }
                     824   ; I2C_CMDR = I2C_CTR_STO;
0800063A  13FC 0040  825          move.b    #64,4227080
0800063E  0040 8008 
08000642  4CDF 1C04  826          movem.l   (A7)+,D2/A2/A3/A4
08000646  4E5E       827          unlk      A6
08000648  4E75       828          rts
                     829   ; }
                     830   ; void main()
                     831   ; {
                     832   _main:
0800064A  4E56 FFF8  833          link      A6,#-8
0800064E  2F02       834          move.l    D2,-(A7)
                     835   ; int i;
                     836   ; unsigned char byteToWrite, address;
                     837   ; byteToWrite = 0x12;
08000650  1D7C 0012  838          move.b    #18,-1(A6)
08000654  FFFF      
                     839   ; I2C_CMDR = 0x00;
08000656  4239 0040  840          clr.b     4227080
0800065A  8008      
                     841   ; I2C_Init();
0800065C  4EB9 0800  842          jsr       _I2C_Init
08000660  01CC      
                     843   ; address = 0x13;
08000662  7413       844          moveq     #19,D2
                     845   ; EEPROMWriteByte(byteToWrite, 0x00, address);
08000664  4882       846          ext.w     D2
08000666  48C2       847          ext.l     D2
08000668  2F02       848          move.l    D2,-(A7)
0800066A  42A7       849          clr.l     -(A7)
0800066C  122E FFFF  850          move.b    -1(A6),D1
08000670  C2BC 0000  851          and.l     #255,D1
08000674  00FF      
08000676  2F01       852          move.l    D1,-(A7)
08000678  4EB9 0800  853          jsr       _EEPROMWriteByte
0800067C  026C      
0800067E  DEFC 000C  854          add.w     #12,A7
                     855   ; EEPROMReadByte(0x00, address);
08000682  C4BC 0000  856          and.l     #255,D2
08000686  00FF      
08000688  2F02       857          move.l    D2,-(A7)
0800068A  42A7       858          clr.l     -(A7)
0800068C  4EB9 0800  859          jsr       _EEPROMReadByte
08000690  036A      
08000692  504F       860          addq.w    #8,A7
                     861   ; //EEPROMWritePage(0x00);
                     862   ; // EEPROMReadByte(0x00, 0x12);
                     863   ; /*EEPROMReadPage();
                     864   ; for (i = 0x0; i < 0x80; i++) {
                     865   ; EEPROMReadByte(0x00, i);
                     866   ; }*/
                     867   ; I2C_CTR = 0x00;
08000694  4239 0040  868          clr.b     4227076
08000698  8004      
                     869   ; while (1)
                     870   main_1:
                     871   ; {}
0800069A  60FE       872          bra       main_1
                     873   ; // programs should NOT exit as there is nothing to Exit TO !!!!!!
                     874   ; // There is no OS - just press the reset button to end program and call debug
                     875   ; }
                     876   _printf:
0800069C  4E56 FFFC  877          link      A6,#-4
080006A0  48E7 2000  878          movem.l   D2,-(A7)
080006A4  41EE 0008  879          lea       8(A6),A0
080006A8  5848       880          addq.w    #4,A0
080006AA  2408       881          move.l    A0,D2
080006AC  2F02       882          move.l    D2,-(A7)
080006AE  2F2E 0008  883          move.l    8(A6),-(A7)
080006B2  42A7       884          clr.l     -(A7)
080006B4  6100 00CA  885          bsr       _vsprintf
080006B8  DEFC 000C  886          add.w     #12,A7
080006BC  2D40 FFFC  887          move.l    D0,-4(A6)
080006C0  4282       888          clr.l     D2
080006C2  202E FFFC  889          move.l    -4(A6),D0
080006C6  4CDF 0004  890          movem.l   (A7)+,D2
080006CA  4E5E       891          unlk      A6
080006CC  4E75       892          rts
                     893   @vsprintf_copy:
080006CE  4E56 0000  894          link      A6,#0
080006D2  206E 0008  895          move.l    8(A6),A0
080006D6  4A90       896          tst.l     (A0)
080006D8  6710       897          beq.s     @vsprintf_copy_1
080006DA  202E 000C  898          move.l    12(A6),D0
080006DE  206E 0008  899          move.l    8(A6),A0
080006E2  2250       900          move.l    (A0),A1
080006E4  5290       901          addq.l    #1,(A0)
080006E6  1280       902          move.b    D0,(A1)
080006E8  600A       903          bra.s     @vsprintf_copy_2
                     904   @vsprintf_copy_1:
080006EA  2F2E 000C  905          move.l    12(A6),-(A7)
080006EE  6100 08FE  906          bsr       _putch
080006F2  584F       907          addq.w    #4,A7
                     908   @vsprintf_copy_2:
080006F4  4E5E       909          unlk      A6
080006F6  4E75       910          rts
                     911   @vsprintf_getval:
080006F8  4E56 0000  912          link      A6,#0
080006FC  48E7 3000  913          movem.l   D2/D3,-(A7)
08000700  242E 0008  914          move.l    8(A6),D2
08000704  4283       915          clr.l     D3
08000706  2042       916          move.l    D2,A0
08000708  2050       917          move.l    (A0),A0
0800070A  1010       918          move.b    (A0),D0
0800070C  4880       919          ext.w     D0
0800070E  48C0       920          ext.l     D0
08000710  0C80 0000  921          cmp.l     #42,D0
08000714  002A      
08000716  6612       922          bne.s     @vsprintf_getval_1
08000718  206E 000C  923          move.l    12(A6),A0
0800071C  2250       924          move.l    (A0),A1
0800071E  5890       925          addq.l    #4,(A0)
08000720  2611       926          move.l    (A1),D3
08000722  2042       927          move.l    D2,A0
08000724  5290       928          addq.l    #1,(A0)
08000726  6000 004E  929          bra       @vsprintf_getval_5
                     930   @vsprintf_getval_1:
0800072A  2042       931          move.l    D2,A0
0800072C  2050       932          move.l    (A0),A0
0800072E  1010       933          move.b    (A0),D0
08000730  4880       934          ext.w     D0
08000732  48C0       935          ext.l     D0
08000734  0C80 0000  936          cmp.l     #48,D0
08000738  0030      
0800073A  6D00 003A  937          blt       @vsprintf_getval_5
0800073E  2042       938          move.l    D2,A0
08000740  2050       939          move.l    (A0),A0
08000742  1010       940          move.b    (A0),D0
08000744  4880       941          ext.w     D0
08000746  48C0       942          ext.l     D0
08000748  0C80 0000  943          cmp.l     #57,D0
0800074C  0039      
0800074E  6E26       944          bgt.s     @vsprintf_getval_5
08000750  2F03       945          move.l    D3,-(A7)
08000752  4878 000A  946          pea       10
08000756  6100 07F6  947          bsr       LMUL
0800075A  2017       948          move.l    (A7),D0
0800075C  504F       949          addq.w    #8,A7
0800075E  2042       950          move.l    D2,A0
08000760  2250       951          move.l    (A0),A1
08000762  5290       952          addq.l    #1,(A0)
08000764  1211       953          move.b    (A1),D1
08000766  4881       954          ext.w     D1
08000768  48C1       955          ext.l     D1
0800076A  D081       956          add.l     D1,D0
0800076C  0480 0000  957          sub.l     #48,D0
08000770  0030      
08000772  2600       958          move.l    D0,D3
08000774  60B4       959          bra       @vsprintf_getval_1
                     960   @vsprintf_getval_5:
08000776  2003       961          move.l    D3,D0
08000778  4CDF 000C  962          movem.l   (A7)+,D2/D3
0800077C  4E5E       963          unlk      A6
0800077E  4E75       964          rts
                     965   _vsprintf:
08000780  4E56 FFCC  966          link      A6,#-52
08000784  48E7 3F3C  967          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
08000788  45EE 0008  968          lea       8(A6),A2
0800078C  47F9 0800  969          lea       @vsprintf_copy,A3
08000790  06CE      
08000792  49F9 0800  970          lea       _ultoa,A4
08000796  0EDA      
08000798  4286       971          clr.l     D6
                     972   vsprintf_1:
0800079A  206E 000C  973          move.l    12(A6),A0
0800079E  4A10       974          tst.b     (A0)
080007A0  6700 0624  975          beq       vsprintf_3
080007A4  206E 000C  976          move.l    12(A6),A0
080007A8  1010       977          move.b    (A0),D0
080007AA  4880       978          ext.w     D0
080007AC  48C0       979          ext.l     D0
080007AE  0C80 0000  980          cmp.l     #37,D0
080007B2  0025      
080007B4  671C       981          beq.s     vsprintf_4
080007B6  206E 000C  982          move.l    12(A6),A0
080007BA  52AE 000C  983          addq.l    #1,12(A6)
080007BE  1210       984          move.b    (A0),D1
080007C0  4881       985          ext.w     D1
080007C2  48C1       986          ext.l     D1
080007C4  2F01       987          move.l    D1,-(A7)
080007C6  2F0A       988          move.l    A2,-(A7)
080007C8  4E93       989          jsr       (A3)
080007CA  504F       990          addq.w    #8,A7
080007CC  5286       991          addq.l    #1,D6
080007CE  6000 05F2  992          bra       vsprintf_2
                     993   vsprintf_4:
080007D2  52AE 000C  994          addq.l    #1,12(A6)
080007D6  422E FFD3  995          clr.b     -45(A6)
080007DA  422E FFD2  996          clr.b     -46(A6)
080007DE  422E FFD0  997          clr.b     -48(A6)
080007E2  422E FFCF  998          clr.b     -49(A6)
080007E6  422E FFCE  999          clr.b     -50(A6)
080007EA  422E FFCD 1000          clr.b     -51(A6)
080007EE  42AE FFFC 1001          clr.l     -4(A6)
080007F2  7AFF      1002          moveq     #-1,D5
080007F4  41EE FFDC 1003          lea       -36(A6),A0
080007F8  2608      1004          move.l    A0,D3
080007FA  2408      1005          move.l    A0,D2
                    1006   vsprintf_6:
080007FC  206E 000C 1007          move.l    12(A6),A0
08000800  1010      1008          move.b    (A0),D0
08000802  4880      1009          ext.w     D0
08000804  48C0      1010          ext.l     D0
08000806  0C80 0000 1011          cmp.l     #43,D0
0800080A  002B      
0800080C  6730      1012          beq.s     vsprintf_12
0800080E  6E18      1013          bgt.s     vsprintf_15
08000810  0C80 0000 1014          cmp.l     #35,D0
08000814  0023      
08000816  6700 003E 1015          beq       vsprintf_14
0800081A  6E00 0046 1016          bgt       vsprintf_9
0800081E  0C80 0000 1017          cmp.l     #32,D0
08000822  0020      
08000824  6724      1018          beq.s     vsprintf_13
08000826  603A      1019          bra.s     vsprintf_9
                    1020   vsprintf_15:
08000828  0C80 0000 1021          cmp.l     #45,D0
0800082C  002D      
0800082E  6702      1022          beq.s     vsprintf_11
08000830  6030      1023          bra.s     vsprintf_9
                    1024   vsprintf_11:
08000832  1D7C 0001 1025          move.b    #1,-51(A6)
08000836  FFCD      
08000838  52AE 000C 1026          addq.l    #1,12(A6)
0800083C  6026      1027          bra.s     vsprintf_7
                    1028   vsprintf_12:
0800083E  1D7C 0001 1029          move.b    #1,-50(A6)
08000842  FFCE      
08000844  52AE 000C 1030          addq.l    #1,12(A6)
08000848  601A      1031          bra.s     vsprintf_7
                    1032   vsprintf_13:
0800084A  1D7C 0001 1033          move.b    #1,-49(A6)
0800084E  FFCF      
08000850  52AE 000C 1034          addq.l    #1,12(A6)
08000854  600E      1035          bra.s     vsprintf_7
                    1036   vsprintf_14:
08000856  1D7C 0001 1037          move.b    #1,-48(A6)
0800085A  FFD0      
0800085C  52AE 000C 1038          addq.l    #1,12(A6)
08000860  6002      1039          bra.s     vsprintf_7
                    1040   vsprintf_9:
08000862  6002      1041          bra.s     vsprintf_8
                    1042   vsprintf_7:
08000864  6096      1043          bra       vsprintf_6
                    1044   vsprintf_8:
08000866  206E 000C 1045          move.l    12(A6),A0
0800086A  1010      1046          move.b    (A0),D0
0800086C  4880      1047          ext.w     D0
0800086E  48C0      1048          ext.l     D0
08000870  0C80 0000 1049          cmp.l     #48,D0
08000874  0030      
08000876  660A      1050          bne.s     vsprintf_16
08000878  52AE 000C 1051          addq.l    #1,12(A6)
0800087C  1D7C 0001 1052          move.b    #1,-46(A6)
08000880  FFD2      
                    1053   vsprintf_16:
08000882  486E 0010 1054          pea       16(A6)
08000886  486E 000C 1055          pea       12(A6)
0800088A  6100 FE6C 1056          bsr       @vsprintf_getval
0800088E  504F      1057          addq.w    #8,A7
08000890  2A40      1058          move.l    D0,A5
08000892  206E 000C 1059          move.l    12(A6),A0
08000896  1010      1060          move.b    (A0),D0
08000898  4880      1061          ext.w     D0
0800089A  48C0      1062          ext.l     D0
0800089C  0C80 0000 1063          cmp.l     #46,D0
080008A0  002E      
080008A2  6614      1064          bne.s     vsprintf_18
080008A4  52AE 000C 1065          addq.l    #1,12(A6)
080008A8  486E 0010 1066          pea       16(A6)
080008AC  486E 000C 1067          pea       12(A6)
080008B0  6100 FE46 1068          bsr       @vsprintf_getval
080008B4  504F      1069          addq.w    #8,A7
080008B6  2A00      1070          move.l    D0,D5
                    1071   vsprintf_18:
080008B8  206E 000C 1072          move.l    12(A6),A0
080008BC  1010      1073          move.b    (A0),D0
080008BE  4880      1074          ext.w     D0
080008C0  48C0      1075          ext.l     D0
080008C2  0C80 0000 1076          cmp.l     #108,D0
080008C6  006C      
080008C8  660A      1077          bne.s     vsprintf_20
080008CA  52AE 000C 1078          addq.l    #1,12(A6)
080008CE  1D7C 0001 1079          move.b    #1,-45(A6)
080008D2  FFD3      
                    1080   vsprintf_20:
080008D4  206E 000C 1081          move.l    12(A6),A0
080008D8  1010      1082          move.b    (A0),D0
080008DA  4880      1083          ext.w     D0
080008DC  48C0      1084          ext.l     D0
080008DE  0C80 0000 1085          cmp.l     #111,D0
080008E2  006F      
080008E4  6700 00D4 1086          beq       vsprintf_27
080008E8  6E34      1087          bgt.s     vsprintf_33
080008EA  0C80 0000 1088          cmp.l     #100,D0
080008EE  0064      
080008F0  6700 0054 1089          beq       vsprintf_24
080008F4  6E1C      1090          bgt.s     vsprintf_34
080008F6  0C80 0000 1091          cmp.l     #99,D0
080008FA  0063      
080008FC  6700 012C 1092          beq       vsprintf_30
08000900  6E00 016A 1093          bgt       vsprintf_22
08000904  0C80 0000 1094          cmp.l     #88,D0
08000908  0058      
0800090A  6700 00E6 1095          beq       vsprintf_28
0800090E  6000 015C 1096          bra       vsprintf_22
                    1097   vsprintf_34:
08000912  0C80 0000 1098          cmp.l     #105,D0
08000916  0069      
08000918  672C      1099          beq.s     vsprintf_24
0800091A  6000 0150 1100          bra       vsprintf_22
                    1101   vsprintf_33:
0800091E  0C80 0000 1102          cmp.l     #117,D0
08000922  0075      
08000924  6700 005C 1103          beq       vsprintf_26
08000928  6E0E      1104          bgt.s     vsprintf_35
0800092A  0C80 0000 1105          cmp.l     #115,D0
0800092E  0073      
08000930  6700 011C 1106          beq       vsprintf_31
08000934  6000 0136 1107          bra       vsprintf_22
                    1108   vsprintf_35:
08000938  0C80 0000 1109          cmp.l     #120,D0
0800093C  0078      
0800093E  6700 00B2 1110          beq       vsprintf_28
08000942  6000 0128 1111          bra       vsprintf_22
                    1112   vsprintf_24:
08000946  4A2E FFD3 1113          tst.b     -45(A6)
0800094A  671A      1114          beq.s     vsprintf_36
0800094C  4878 000A 1115          pea       10
08000950  2F03      1116          move.l    D3,-(A7)
08000952  206E 0010 1117          move.l    16(A6),A0
08000956  58AE 0010 1118          addq.l    #4,16(A6)
0800095A  2F10      1119          move.l    (A0),-(A7)
0800095C  6100 04F8 1120          bsr       _ltoa
08000960  DEFC 000C 1121          add.w     #12,A7
08000964  6018      1122          bra.s     vsprintf_37
                    1123   vsprintf_36:
08000966  4878 000A 1124          pea       10
0800096A  2F03      1125          move.l    D3,-(A7)
0800096C  206E 0010 1126          move.l    16(A6),A0
08000970  58AE 0010 1127          addq.l    #4,16(A6)
08000974  2F10      1128          move.l    (A0),-(A7)
08000976  6100 04DE 1129          bsr       _ltoa
0800097A  DEFC 000C 1130          add.w     #12,A7
                    1131   vsprintf_37:
0800097E  6000 00FA 1132          bra       vsprintf_23
                    1133   vsprintf_26:
08000982  4A2E FFD3 1134          tst.b     -45(A6)
08000986  6718      1135          beq.s     vsprintf_38
08000988  4878 000A 1136          pea       10
0800098C  2F03      1137          move.l    D3,-(A7)
0800098E  206E 0010 1138          move.l    16(A6),A0
08000992  58AE 0010 1139          addq.l    #4,16(A6)
08000996  2F10      1140          move.l    (A0),-(A7)
08000998  4E94      1141          jsr       (A4)
0800099A  DEFC 000C 1142          add.w     #12,A7
0800099E  6016      1143          bra.s     vsprintf_39
                    1144   vsprintf_38:
080009A0  4878 000A 1145          pea       10
080009A4  2F03      1146          move.l    D3,-(A7)
080009A6  206E 0010 1147          move.l    16(A6),A0
080009AA  58AE 0010 1148          addq.l    #4,16(A6)
080009AE  2F10      1149          move.l    (A0),-(A7)
080009B0  4E94      1150          jsr       (A4)
080009B2  DEFC 000C 1151          add.w     #12,A7
                    1152   vsprintf_39:
080009B6  6000 00C2 1153          bra       vsprintf_23
                    1154   vsprintf_27:
080009BA  4A2E FFD3 1155          tst.b     -45(A6)
080009BE  6718      1156          beq.s     vsprintf_40
080009C0  4878 0008 1157          pea       8
080009C4  2F03      1158          move.l    D3,-(A7)
080009C6  206E 0010 1159          move.l    16(A6),A0
080009CA  58AE 0010 1160          addq.l    #4,16(A6)
080009CE  2F10      1161          move.l    (A0),-(A7)
080009D0  4E94      1162          jsr       (A4)
080009D2  DEFC 000C 1163          add.w     #12,A7
080009D6  6016      1164          bra.s     vsprintf_41
                    1165   vsprintf_40:
080009D8  4878 0008 1166          pea       8
080009DC  2F03      1167          move.l    D3,-(A7)
080009DE  206E 0010 1168          move.l    16(A6),A0
080009E2  58AE 0010 1169          addq.l    #4,16(A6)
080009E6  2F10      1170          move.l    (A0),-(A7)
080009E8  4E94      1171          jsr       (A4)
080009EA  DEFC 000C 1172          add.w     #12,A7
                    1173   vsprintf_41:
080009EE  6000 008A 1174          bra       vsprintf_23
                    1175   vsprintf_28:
080009F2  4A2E FFD3 1176          tst.b     -45(A6)
080009F6  6718      1177          beq.s     vsprintf_42
080009F8  4878 0010 1178          pea       16
080009FC  2F03      1179          move.l    D3,-(A7)
080009FE  206E 0010 1180          move.l    16(A6),A0
08000A02  58AE 0010 1181          addq.l    #4,16(A6)
08000A06  2F10      1182          move.l    (A0),-(A7)
08000A08  4E94      1183          jsr       (A4)
08000A0A  DEFC 000C 1184          add.w     #12,A7
08000A0E  6016      1185          bra.s     vsprintf_43
                    1186   vsprintf_42:
08000A10  4878 0010 1187          pea       16
08000A14  2F03      1188          move.l    D3,-(A7)
08000A16  206E 0010 1189          move.l    16(A6),A0
08000A1A  58AE 0010 1190          addq.l    #4,16(A6)
08000A1E  2F10      1191          move.l    (A0),-(A7)
08000A20  4E94      1192          jsr       (A4)
08000A22  DEFC 000C 1193          add.w     #12,A7
                    1194   vsprintf_43:
08000A26  6000 0052 1195          bra       vsprintf_23
                    1196   vsprintf_30:
08000A2A  206E 0010 1197          move.l    16(A6),A0
08000A2E  58AE 0010 1198          addq.l    #4,16(A6)
08000A32  2010      1199          move.l    (A0),D0
08000A34  2042      1200          move.l    D2,A0
08000A36  5282      1201          addq.l    #1,D2
08000A38  1080      1202          move.b    D0,(A0)
08000A3A  2042      1203          move.l    D2,A0
08000A3C  4210      1204          clr.b     (A0)
08000A3E  200D      1205          move.l    A5,D0
08000A40  6704      1206          beq.s     vsprintf_44
08000A42  200D      1207          move.l    A5,D0
08000A44  6002      1208          bra.s     vsprintf_45
                    1209   vsprintf_44:
08000A46  7001      1210          moveq     #1,D0
                    1211   vsprintf_45:
08000A48  2A00      1212          move.l    D0,D5
08000A4A  6000 002E 1213          bra       vsprintf_23
                    1214   vsprintf_31:
08000A4E  206E 0010 1215          move.l    16(A6),A0
08000A52  58AE 0010 1216          addq.l    #4,16(A6)
08000A56  2610      1217          move.l    (A0),D3
08000A58  0C85 FFFF 1218          cmp.l     #-1,D5
08000A5C  FFFF      
08000A5E  660A      1219          bne.s     vsprintf_46
08000A60  2F03      1220          move.l    D3,-(A7)
08000A62  6100 0578 1221          bsr       _strlen
08000A66  584F      1222          addq.w    #4,A7
08000A68  2A00      1223          move.l    D0,D5
                    1224   vsprintf_46:
08000A6A  600E      1225          bra.s     vsprintf_23
                    1226   vsprintf_22:
08000A6C  206E 000C 1227          move.l    12(A6),A0
08000A70  2242      1228          move.l    D2,A1
08000A72  5282      1229          addq.l    #1,D2
08000A74  1290      1230          move.b    (A0),(A1)
08000A76  2042      1231          move.l    D2,A0
08000A78  4210      1232          clr.b     (A0)
                    1233   vsprintf_23:
08000A7A  2F03      1234          move.l    D3,-(A7)
08000A7C  6100 055E 1235          bsr       _strlen
08000A80  584F      1236          addq.w    #4,A7
08000A82  1800      1237          move.b    D0,D4
08000A84  206E 000C 1238          move.l    12(A6),A0
08000A88  1010      1239          move.b    (A0),D0
08000A8A  4880      1240          ext.w     D0
08000A8C  48C0      1241          ext.l     D0
08000A8E  0C80 0000 1242          cmp.l     #115,D0
08000A92  0073      
08000A94  6618      1243          bne.s     vsprintf_48
08000A96  0C85 0000 1244          cmp.l     #0,D5
08000A9A  0000      
08000A9C  6D10      1245          blt.s     vsprintf_48
08000A9E  4884      1246          ext.w     D4
08000AA0  48C4      1247          ext.l     D4
08000AA2  B885      1248          cmp.l     D5,D4
08000AA4  6F04      1249          ble.s     vsprintf_50
08000AA6  1005      1250          move.b    D5,D0
08000AA8  6002      1251          bra.s     vsprintf_51
                    1252   vsprintf_50:
08000AAA  1004      1253          move.b    D4,D0
                    1254   vsprintf_51:
08000AAC  1800      1255          move.b    D0,D4
                    1256   vsprintf_48:
08000AAE  206E 000C 1257          move.l    12(A6),A0
08000AB2  1010      1258          move.b    (A0),D0
08000AB4  4880      1259          ext.w     D0
08000AB6  48C0      1260          ext.l     D0
08000AB8  0C80 0000 1261          cmp.l     #88,D0
08000ABC  0058      
08000ABE  6600 0026 1262          bne       vsprintf_56
08000AC2  41EE FFDC 1263          lea       -36(A6),A0
08000AC6  2408      1264          move.l    A0,D2
                    1265   vsprintf_54:
08000AC8  2042      1266          move.l    D2,A0
08000ACA  4A10      1267          tst.b     (A0)
08000ACC  6718      1268          beq.s     vsprintf_56
08000ACE  2042      1269          move.l    D2,A0
08000AD0  1210      1270          move.b    (A0),D1
08000AD2  4881      1271          ext.w     D1
08000AD4  48C1      1272          ext.l     D1
08000AD6  2F01      1273          move.l    D1,-(A7)
08000AD8  6100 0544 1274          bsr       _toupper
08000ADC  584F      1275          addq.w    #4,A7
08000ADE  2042      1276          move.l    D2,A0
08000AE0  1080      1277          move.b    D0,(A0)
08000AE2  5282      1278          addq.l    #1,D2
08000AE4  60E2      1279          bra       vsprintf_54
                    1280   vsprintf_56:
08000AE6  7E00      1281          moveq     #0,D7
08000AE8  41EE FFD4 1282          lea       -44(A6),A0
08000AEC  2408      1283          move.l    A0,D2
08000AEE  206E 000C 1284          move.l    12(A6),A0
08000AF2  1010      1285          move.b    (A0),D0
08000AF4  4880      1286          ext.w     D0
08000AF6  48C0      1287          ext.l     D0
08000AF8  0C80 0000 1288          cmp.l     #100,D0
08000AFC  0064      
08000AFE  6714      1289          beq.s     vsprintf_59
08000B00  206E 000C 1290          move.l    12(A6),A0
08000B04  1010      1291          move.b    (A0),D0
08000B06  4880      1292          ext.w     D0
08000B08  48C0      1293          ext.l     D0
08000B0A  0C80 0000 1294          cmp.l     #105,D0
08000B0E  0069      
08000B10  6600 0076 1295          bne       vsprintf_65
                    1296   vsprintf_59:
08000B14  4A2E FFCE 1297          tst.b     -50(A6)
08000B18  6612      1298          bne.s     vsprintf_62
08000B1A  2043      1299          move.l    D3,A0
08000B1C  1010      1300          move.b    (A0),D0
08000B1E  4880      1301          ext.w     D0
08000B20  48C0      1302          ext.l     D0
08000B22  0C80 0000 1303          cmp.l     #45,D0
08000B26  002D      
08000B28  6600 002E 1304          bne       vsprintf_60
                    1305   vsprintf_62:
08000B2C  2043      1306          move.l    D3,A0
08000B2E  1010      1307          move.b    (A0),D0
08000B30  4880      1308          ext.w     D0
08000B32  48C0      1309          ext.l     D0
08000B34  0C80 0000 1310          cmp.l     #45,D0
08000B38  002D      
08000B3A  660E      1311          bne.s     vsprintf_63
08000B3C  2043      1312          move.l    D3,A0
08000B3E  5283      1313          addq.l    #1,D3
08000B40  2242      1314          move.l    D2,A1
08000B42  5282      1315          addq.l    #1,D2
08000B44  1290      1316          move.b    (A0),(A1)
08000B46  5304      1317          subq.b    #1,D4
08000B48  6008      1318          bra.s     vsprintf_64
                    1319   vsprintf_63:
08000B4A  2042      1320          move.l    D2,A0
08000B4C  5282      1321          addq.l    #1,D2
08000B4E  10BC 002B 1322          move.b    #43,(A0)
                    1323   vsprintf_64:
08000B52  5287      1324          addq.l    #1,D7
08000B54  6000 0032 1325          bra       vsprintf_65
                    1326   vsprintf_60:
08000B58  4A2E FFCF 1327          tst.b     -49(A6)
08000B5C  6700 002A 1328          beq       vsprintf_65
08000B60  2043      1329          move.l    D3,A0
08000B62  1010      1330          move.b    (A0),D0
08000B64  4880      1331          ext.w     D0
08000B66  48C0      1332          ext.l     D0
08000B68  0C80 0000 1333          cmp.l     #45,D0
08000B6C  002D      
08000B6E  660E      1334          bne.s     vsprintf_67
08000B70  2043      1335          move.l    D3,A0
08000B72  5283      1336          addq.l    #1,D3
08000B74  2242      1337          move.l    D2,A1
08000B76  5282      1338          addq.l    #1,D2
08000B78  1290      1339          move.b    (A0),(A1)
08000B7A  5304      1340          subq.b    #1,D4
08000B7C  6008      1341          bra.s     vsprintf_68
                    1342   vsprintf_67:
08000B7E  2042      1343          move.l    D2,A0
08000B80  5282      1344          addq.l    #1,D2
08000B82  10BC 0020 1345          move.b    #32,(A0)
                    1346   vsprintf_68:
08000B86  5287      1347          addq.l    #1,D7
                    1348   vsprintf_65:
08000B88  4A2E FFD0 1349          tst.b     -48(A6)
08000B8C  6700 0066 1350          beq       vsprintf_77
08000B90  206E 000C 1351          move.l    12(A6),A0
08000B94  1010      1352          move.b    (A0),D0
08000B96  4880      1353          ext.w     D0
08000B98  48C0      1354          ext.l     D0
08000B9A  0C80 0000 1355          cmp.l     #111,D0
08000B9E  006F      
08000BA0  671A      1356          beq.s     vsprintf_73
08000BA2  6E0C      1357          bgt.s     vsprintf_76
08000BA4  0C80 0000 1358          cmp.l     #88,D0
08000BA8  0058      
08000BAA  6710      1359          beq.s     vsprintf_73
08000BAC  6000 0046 1360          bra       vsprintf_77
                    1361   vsprintf_76:
08000BB0  0C80 0000 1362          cmp.l     #120,D0
08000BB4  0078      
08000BB6  6704      1363          beq.s     vsprintf_73
08000BB8  6000 003A 1364          bra       vsprintf_77
                    1365   vsprintf_73:
08000BBC  2042      1366          move.l    D2,A0
08000BBE  5282      1367          addq.l    #1,D2
08000BC0  10BC 0030 1368          move.b    #48,(A0)
08000BC4  5287      1369          addq.l    #1,D7
08000BC6  206E 000C 1370          move.l    12(A6),A0
08000BCA  1010      1371          move.b    (A0),D0
08000BCC  4880      1372          ext.w     D0
08000BCE  48C0      1373          ext.l     D0
08000BD0  0C80 0000 1374          cmp.l     #120,D0
08000BD4  0078      
08000BD6  6712      1375          beq.s     vsprintf_79
08000BD8  206E 000C 1376          move.l    12(A6),A0
08000BDC  1010      1377          move.b    (A0),D0
08000BDE  4880      1378          ext.w     D0
08000BE0  48C0      1379          ext.l     D0
08000BE2  0C80 0000 1380          cmp.l     #88,D0
08000BE6  0058      
08000BE8  660A      1381          bne.s     vsprintf_77
                    1382   vsprintf_79:
08000BEA  2042      1383          move.l    D2,A0
08000BEC  5282      1384          addq.l    #1,D2
08000BEE  10BC 0078 1385          move.b    #120,(A0)
08000BF2  5287      1386          addq.l    #1,D7
                    1387   vsprintf_77:
08000BF4  2042      1388          move.l    D2,A0
08000BF6  4210      1389          clr.b     (A0)
08000BF8  206E 000C 1390          move.l    12(A6),A0
08000BFC  1010      1391          move.b    (A0),D0
08000BFE  4880      1392          ext.w     D0
08000C00  48C0      1393          ext.l     D0
08000C02  0C80 0000 1394          cmp.l     #105,D0
08000C06  0069      
08000C08  6700 0076 1395          beq       vsprintf_82
08000C0C  6E42      1396          bgt.s     vsprintf_93
08000C0E  0C80 0000 1397          cmp.l     #99,D0
08000C12  0063      
08000C14  6700 0084 1398          beq       vsprintf_96
08000C18  6E1C      1399          bgt.s     vsprintf_94
08000C1A  0C80 0000 1400          cmp.l     #88,D0
08000C1E  0058      
08000C20  6700 005E 1401          beq       vsprintf_82
08000C24  6E00 0184 1402          bgt       vsprintf_80
08000C28  0C80 0000 1403          cmp.l     #69,D0
08000C2C  0045      
08000C2E  6700 0050 1404          beq       vsprintf_82
08000C32  6000 0176 1405          bra       vsprintf_80
                    1406   vsprintf_94:
08000C36  0C80 0000 1407          cmp.l     #101,D0
08000C3A  0065      
08000C3C  6700 0042 1408          beq       vsprintf_82
08000C40  6E00 0168 1409          bgt       vsprintf_80
08000C44  0C80 0000 1410          cmp.l     #100,D0
08000C48  0064      
08000C4A  6734      1411          beq.s     vsprintf_82
08000C4C  6000 015C 1412          bra       vsprintf_80
                    1413   vsprintf_93:
08000C50  0C80 0000 1414          cmp.l     #117,D0
08000C54  0075      
08000C56  6728      1415          beq.s     vsprintf_82
08000C58  6E1A      1416          bgt.s     vsprintf_95
08000C5A  0C80 0000 1417          cmp.l     #115,D0
08000C5E  0073      
08000C60  6700 0038 1418          beq       vsprintf_96
08000C64  6E00 0144 1419          bgt       vsprintf_80
08000C68  0C80 0000 1420          cmp.l     #111,D0
08000C6C  006F      
08000C6E  6710      1421          beq.s     vsprintf_82
08000C70  6000 0138 1422          bra       vsprintf_80
                    1423   vsprintf_95:
08000C74  0C80 0000 1424          cmp.l     #120,D0
08000C78  0078      
08000C7A  6704      1425          beq.s     vsprintf_82
08000C7C  6000 012C 1426          bra       vsprintf_80
                    1427   vsprintf_82:
08000C80  4A2E FFD2 1428          tst.b     -46(A6)
08000C84  6714      1429          beq.s     vsprintf_96
08000C86  4A2E FFCD 1430          tst.b     -51(A6)
08000C8A  660E      1431          bne.s     vsprintf_96
08000C8C  200D      1432          move.l    A5,D0
08000C8E  9087      1433          sub.l     D7,D0
08000C90  4884      1434          ext.w     D4
08000C92  48C4      1435          ext.l     D4
08000C94  9084      1436          sub.l     D4,D0
08000C96  2D40 FFFC 1437          move.l    D0,-4(A6)
                    1438   vsprintf_96:
08000C9A  202E FFFC 1439          move.l    -4(A6),D0
08000C9E  0C80 0000 1440          cmp.l     #0,D0
08000CA2  0000      
08000CA4  6C04      1441          bge.s     vsprintf_98
08000CA6  42AE FFFC 1442          clr.l     -4(A6)
                    1443   vsprintf_98:
08000CAA  4A2E FFCD 1444          tst.b     -51(A6)
08000CAE  6600 0030 1445          bne       vsprintf_104
08000CB2  4884      1446          ext.w     D4
08000CB4  48C4      1447          ext.l     D4
08000CB6  2004      1448          move.l    D4,D0
08000CB8  D0AE FFFC 1449          add.l     -4(A6),D0
08000CBC  D087      1450          add.l     D7,D0
08000CBE  1D40 FFD1 1451          move.b    D0,-47(A6)
                    1452   vsprintf_102:
08000CC2  102E FFD1 1453          move.b    -47(A6),D0
08000CC6  4880      1454          ext.w     D0
08000CC8  48C0      1455          ext.l     D0
08000CCA  220D      1456          move.l    A5,D1
08000CCC  534D      1457          subq.w    #1,A5
08000CCE  B081      1458          cmp.l     D1,D0
08000CD0  6C0E      1459          bge.s     vsprintf_104
08000CD2  4878 0020 1460          pea       32
08000CD6  2F0A      1461          move.l    A2,-(A7)
08000CD8  4E93      1462          jsr       (A3)
08000CDA  504F      1463          addq.w    #8,A7
08000CDC  5286      1464          addq.l    #1,D6
08000CDE  60E2      1465          bra       vsprintf_102
                    1466   vsprintf_104:
08000CE0  41EE FFD4 1467          lea       -44(A6),A0
08000CE4  2408      1468          move.l    A0,D2
                    1469   vsprintf_105:
08000CE6  2042      1470          move.l    D2,A0
08000CE8  4A10      1471          tst.b     (A0)
08000CEA  6716      1472          beq.s     vsprintf_107
08000CEC  2042      1473          move.l    D2,A0
08000CEE  5282      1474          addq.l    #1,D2
08000CF0  1210      1475          move.b    (A0),D1
08000CF2  4881      1476          ext.w     D1
08000CF4  48C1      1477          ext.l     D1
08000CF6  2F01      1478          move.l    D1,-(A7)
08000CF8  2F0A      1479          move.l    A2,-(A7)
08000CFA  4E93      1480          jsr       (A3)
08000CFC  504F      1481          addq.w    #8,A7
08000CFE  5286      1482          addq.l    #1,D6
08000D00  60E4      1483          bra       vsprintf_105
                    1484   vsprintf_107:
08000D02  202E FFFC 1485          move.l    -4(A6),D0
08000D06  1D40 FFD1 1486          move.b    D0,-47(A6)
                    1487   vsprintf_108:
08000D0A  102E FFD1 1488          move.b    -47(A6),D0
08000D0E  532E FFD1 1489          subq.b    #1,-47(A6)
08000D12  4A00      1490          tst.b     D0
08000D14  670E      1491          beq.s     vsprintf_110
08000D16  4878 0030 1492          pea       48
08000D1A  2F0A      1493          move.l    A2,-(A7)
08000D1C  4E93      1494          jsr       (A3)
08000D1E  504F      1495          addq.w    #8,A7
08000D20  5286      1496          addq.l    #1,D6
08000D22  60E6      1497          bra       vsprintf_108
                    1498   vsprintf_110:
08000D24  2043      1499          move.l    D3,A0
08000D26  4A10      1500          tst.b     (A0)
08000D28  6700 0048 1501          beq       vsprintf_113
08000D2C  206E 000C 1502          move.l    12(A6),A0
08000D30  1010      1503          move.b    (A0),D0
08000D32  4880      1504          ext.w     D0
08000D34  48C0      1505          ext.l     D0
08000D36  0C80 0000 1506          cmp.l     #115,D0
08000D3A  0073      
08000D3C  670C      1507          beq.s     vsprintf_116
08000D3E  6E18      1508          bgt.s     vsprintf_119
08000D40  0C80 0000 1509          cmp.l     #99,D0
08000D44  0063      
08000D46  6702      1510          beq.s     vsprintf_116
08000D48  600E      1511          bra.s     vsprintf_119
                    1512   vsprintf_116:
08000D4A  2005      1513          move.l    D5,D0
08000D4C  5385      1514          subq.l    #1,D5
08000D4E  0C80 0000 1515          cmp.l     #0,D0
08000D52  0000      
08000D54  6E02      1516          bgt.s     vsprintf_119
08000D56  6016      1517          bra.s     vsprintf_115
                    1518   vsprintf_119:
08000D58  2043      1519          move.l    D3,A0
08000D5A  5283      1520          addq.l    #1,D3
08000D5C  1210      1521          move.b    (A0),D1
08000D5E  4881      1522          ext.w     D1
08000D60  48C1      1523          ext.l     D1
08000D62  2F01      1524          move.l    D1,-(A7)
08000D64  2F0A      1525          move.l    A2,-(A7)
08000D66  4E93      1526          jsr       (A3)
08000D68  504F      1527          addq.w    #8,A7
08000D6A  5286      1528          addq.l    #1,D6
08000D6C  6002      1529          bra.s     vsprintf_112
                    1530   vsprintf_115:
08000D6E  6002      1531          bra.s     vsprintf_113
                    1532   vsprintf_112:
08000D70  60B2      1533          bra       vsprintf_110
                    1534   vsprintf_113:
08000D72  4A2E FFCD 1535          tst.b     -51(A6)
08000D76  6700 0030 1536          beq       vsprintf_125
08000D7A  4884      1537          ext.w     D4
08000D7C  48C4      1538          ext.l     D4
08000D7E  2004      1539          move.l    D4,D0
08000D80  D0AE FFFC 1540          add.l     -4(A6),D0
08000D84  D087      1541          add.l     D7,D0
08000D86  1D40 FFD1 1542          move.b    D0,-47(A6)
                    1543   vsprintf_123:
08000D8A  102E FFD1 1544          move.b    -47(A6),D0
08000D8E  4880      1545          ext.w     D0
08000D90  48C0      1546          ext.l     D0
08000D92  220D      1547          move.l    A5,D1
08000D94  534D      1548          subq.w    #1,A5
08000D96  B081      1549          cmp.l     D1,D0
08000D98  6C0E      1550          bge.s     vsprintf_125
08000D9A  4878 0020 1551          pea       32
08000D9E  2F0A      1552          move.l    A2,-(A7)
08000DA0  4E93      1553          jsr       (A3)
08000DA2  504F      1554          addq.w    #8,A7
08000DA4  5386      1555          subq.l    #1,D6
08000DA6  60E2      1556          bra       vsprintf_123
                    1557   vsprintf_125:
08000DA8  6014      1558          bra.s     vsprintf_81
                    1559   vsprintf_80:
08000DAA  206E 000C 1560          move.l    12(A6),A0
08000DAE  1210      1561          move.b    (A0),D1
08000DB0  4881      1562          ext.w     D1
08000DB2  48C1      1563          ext.l     D1
08000DB4  2F01      1564          move.l    D1,-(A7)
08000DB6  2F0A      1565          move.l    A2,-(A7)
08000DB8  4E93      1566          jsr       (A3)
08000DBA  504F      1567          addq.w    #8,A7
08000DBC  5286      1568          addq.l    #1,D6
                    1569   vsprintf_81:
08000DBE  52AE 000C 1570          addq.l    #1,12(A6)
                    1571   vsprintf_2:
08000DC2  6000 F9D6 1572          bra       vsprintf_1
                    1573   vsprintf_3:
08000DC6  4A92      1574          tst.l     (A2)
08000DC8  6710      1575          beq.s     vsprintf_126
08000DCA  4201      1576          clr.b     D1
08000DCC  C2BC 0000 1577          and.l     #255,D1
08000DD0  00FF      
08000DD2  2F01      1578          move.l    D1,-(A7)
08000DD4  2F0A      1579          move.l    A2,-(A7)
08000DD6  4E93      1580          jsr       (A3)
08000DD8  504F      1581          addq.w    #8,A7
                    1582   vsprintf_126:
08000DDA  2006      1583          move.l    D6,D0
08000DDC  4CDF 3CFC 1584          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
08000DE0  4E5E      1585          unlk      A6
08000DE2  4E75      1586          rts
                    1587   @itoa_convert:
08000DE4  4E56 0000 1588          link      A6,#0
08000DE8  48E7 3C00 1589          movem.l   D2/D3/D4/D5,-(A7)
08000DEC  242E 0008 1590          move.l    8(A6),D2
08000DF0  262E 0010 1591          move.l    16(A6),D3
08000DF4  2A2E 000C 1592          move.l    12(A6),D5
08000DF8  2F05      1593          move.l    D5,-(A7)
08000DFA  2F03      1594          move.l    D3,-(A7)
08000DFC  6100 025C 1595          bsr       ULDIV
08000E00  202F 0004 1596          move.l    4(A7),D0
08000E04  504F      1597          addq.w    #8,A7
08000E06  2800      1598          move.l    D0,D4
08000E08  BA83      1599          cmp.l     D3,D5
08000E0A  651A      1600          blo.s     @itoa_convert_1
08000E0C  2F03      1601          move.l    D3,-(A7)
08000E0E  2F05      1602          move.l    D5,-(A7)
08000E10  2F03      1603          move.l    D3,-(A7)
08000E12  6100 0246 1604          bsr       ULDIV
08000E16  2217      1605          move.l    (A7),D1
08000E18  504F      1606          addq.w    #8,A7
08000E1A  2F01      1607          move.l    D1,-(A7)
08000E1C  2F02      1608          move.l    D2,-(A7)
08000E1E  61C4      1609          bsr       @itoa_convert
08000E20  DEFC 000C 1610          add.w     #12,A7
08000E24  2400      1611          move.l    D0,D2
                    1612   @itoa_convert_1:
08000E26  0C84 0000 1613          cmp.l     #9,D4
08000E2A  0009      
08000E2C  6E0A      1614          bgt.s     @itoa_convert_3
08000E2E  2004      1615          move.l    D4,D0
08000E30  0680 0000 1616          add.l     #48,D0
08000E34  0030      
08000E36  600E      1617          bra.s     @itoa_convert_4
                    1618   @itoa_convert_3:
08000E38  2004      1619          move.l    D4,D0
08000E3A  0680 0000 1620          add.l     #97,D0
08000E3E  0061      
08000E40  0480 0000 1621          sub.l     #10,D0
08000E44  000A      
                    1622   @itoa_convert_4:
08000E46  2042      1623          move.l    D2,A0
08000E48  1080      1624          move.b    D0,(A0)
08000E4A  2002      1625          move.l    D2,D0
08000E4C  5280      1626          addq.l    #1,D0
08000E4E  4CDF 003C 1627          movem.l   (A7)+,D2/D3/D4/D5
08000E52  4E5E      1628          unlk      A6
08000E54  4E75      1629          rts
                    1630   _ltoa:
08000E56  4E56 0000 1631          link      A6,#0
08000E5A  48E7 3C00 1632          movem.l   D2/D3/D4/D5,-(A7)
08000E5E  242E 0008 1633          move.l    8(A6),D2
08000E62  262E 000C 1634          move.l    12(A6),D3
08000E66  2A2E 0010 1635          move.l    16(A6),D5
08000E6A  2803      1636          move.l    D3,D4
08000E6C  0C85 0000 1637          cmp.l     #2,D5
08000E70  0002      
08000E72  6D08      1638          blt.s     ltoa_3
08000E74  0C85 0000 1639          cmp.l     #36,D5
08000E78  0024      
08000E7A  6F06      1640          ble.s     ltoa_1
                    1641   ltoa_3:
08000E7C  2003      1642          move.l    D3,D0
08000E7E  6000 0052 1643          bra       ltoa_4
                    1644   ltoa_1:
08000E82  0C85 0000 1645          cmp.l     #10,D5
08000E86  000A      
08000E88  6600 0032 1646          bne       ltoa_5
08000E8C  0C82 0000 1647          cmp.l     #0,D2
08000E90  0000      
08000E92  6C28      1648          bge.s     ltoa_5
08000E94  2002      1649          move.l    D2,D0
08000E96  4480      1650          neg.l     D0
08000E98  2400      1651          move.l    D0,D2
08000E9A  0C82 0000 1652          cmp.l     #0,D2
08000E9E  0000      
08000EA0  6C12      1653          bge.s     ltoa_7
08000EA2  4879 0800 1654          pea       @itoa_1
08000EA6  1264      
08000EA8  2F03      1655          move.l    D3,-(A7)
08000EAA  6100 019E 1656          bsr       _strcpy
08000EAE  504F      1657          addq.w    #8,A7
08000EB0  2003      1658          move.l    D3,D0
08000EB2  601E      1659          bra.s     ltoa_4
                    1660   ltoa_7:
08000EB4  2044      1661          move.l    D4,A0
08000EB6  5284      1662          addq.l    #1,D4
08000EB8  10BC 002D 1663          move.b    #45,(A0)
                    1664   ltoa_5:
08000EBC  2F05      1665          move.l    D5,-(A7)
08000EBE  2F02      1666          move.l    D2,-(A7)
08000EC0  2F04      1667          move.l    D4,-(A7)
08000EC2  6100 FF20 1668          bsr       @itoa_convert
08000EC6  DEFC 000C 1669          add.w     #12,A7
08000ECA  2800      1670          move.l    D0,D4
08000ECC  2044      1671          move.l    D4,A0
08000ECE  4210      1672          clr.b     (A0)
08000ED0  2003      1673          move.l    D3,D0
                    1674   ltoa_4:
08000ED2  4CDF 003C 1675          movem.l   (A7)+,D2/D3/D4/D5
08000ED6  4E5E      1676          unlk      A6
08000ED8  4E75      1677          rts
                    1678   _ultoa:
08000EDA  4E56 0000 1679          link      A6,#0
08000EDE  48E7 3800 1680          movem.l   D2/D3/D4,-(A7)
08000EE2  262E 0010 1681          move.l    16(A6),D3
08000EE6  282E 000C 1682          move.l    12(A6),D4
08000EEA  2404      1683          move.l    D4,D2
08000EEC  0C83 0000 1684          cmp.l     #2,D3
08000EF0  0002      
08000EF2  6D08      1685          blt.s     ultoa_3
08000EF4  0C83 0000 1686          cmp.l     #36,D3
08000EF8  0024      
08000EFA  6F04      1687          ble.s     ultoa_1
                    1688   ultoa_3:
08000EFC  2004      1689          move.l    D4,D0
08000EFE  6018      1690          bra.s     ultoa_4
                    1691   ultoa_1:
08000F00  2F03      1692          move.l    D3,-(A7)
08000F02  2F2E 0008 1693          move.l    8(A6),-(A7)
08000F06  2F02      1694          move.l    D2,-(A7)
08000F08  6100 FEDA 1695          bsr       @itoa_convert
08000F0C  DEFC 000C 1696          add.w     #12,A7
08000F10  2400      1697          move.l    D0,D2
08000F12  2042      1698          move.l    D2,A0
08000F14  4210      1699          clr.b     (A0)
08000F16  2004      1700          move.l    D4,D0
                    1701   ultoa_4:
08000F18  4CDF 001C 1702          movem.l   (A7)+,D2/D3/D4
08000F1C  4E5E      1703          unlk      A6
08000F1E  4E75      1704          rts
                    1705   _itoa:
08000F20  4E56 0000 1706          link      A6,#0
08000F24  2F2E 0010 1707          move.l    16(A6),-(A7)
08000F28  2F2E 000C 1708          move.l    12(A6),-(A7)
08000F2C  2F2E 0008 1709          move.l    8(A6),-(A7)
08000F30  6100 FF24 1710          bsr       _ltoa
08000F34  DEFC 000C 1711          add.w     #12,A7
08000F38  4E5E      1712          unlk      A6
08000F3A  4E75      1713          rts
                    1714   ULMUL:
08000F3C  4E56 0000 1715          link    A6,#0
08000F40  48E7 C000 1716          movem.l D0/D1,-(A7)
08000F44  222E 0008 1717          move.l  8(A6),D1
08000F48  202E 000C 1718          move.l  12(A6),D0
08000F4C  602C      1719          bra.s   lmul_3
                    1720   LMUL:
08000F4E  4E56 0000 1721          link    A6,#0
08000F52  48E7 C000 1722          movem.l D0/D1,-(A7)
08000F56  222E 0008 1723          move.l  8(A6),D1
08000F5A  202E 000C 1724          move.l  12(A6),D0
08000F5E  4A80      1725          tst.l   D0
08000F60  6A0A      1726          bpl.s   lmul_1
08000F62  4480      1727          neg.l   D0
08000F64  4A81      1728          tst.l   D1
08000F66  6A0A      1729          bpl.s   lmul_2
08000F68  4481      1730          neg.l   D1
08000F6A  600E      1731          bra.s   lmul_3
                    1732   lmul_1:
08000F6C  4A81      1733          tst.l   D1
08000F6E  6A0A      1734          bpl.s   lmul_3
08000F70  4481      1735          neg.l   D1
                    1736   lmul_2:
08000F72  6114      1737          bsr.s   domul
08000F74  4481      1738          neg.l   D1
08000F76  4080      1739          negx.l  D0
08000F78  6002      1740          bra.s   lmul_4
                    1741   lmul_3:
08000F7A  610C      1742          bsr.s   domul
                    1743   lmul_4:
08000F7C  2D41 0008 1744          move.l  D1,8(A6)
08000F80  4CDF 0003 1745          movem.l (A7)+,D0/D1
08000F84  4E5E      1746          unlk    A6
08000F86  4E75      1747          rts
                    1748   domul:
08000F88  0C81 0000 1749          cmpi.l  #$FFFF,D1
08000F8C  FFFF      
08000F8E  620C      1750          bhi.s   domul_1
08000F90  0C80 0000 1751          cmpi.l  #$FFFF,D0
08000F94  FFFF      
08000F96  620E      1752          bhi.s   domul_2
08000F98  C2C0      1753          mulu    D0,D1
08000F9A  4E75      1754          rts
                    1755   domul_1:
08000F9C  0C80 0000 1756          cmpi.l  #$FFFF,D0
08000FA0  FFFF      
08000FA2  6218      1757          bhi.s   domul_4
08000FA4  6002      1758          bra.s   domul_3
                    1759   domul_2
08000FA6  C141      1760          exg     D0,D1
                    1761   domul_3:
08000FA8  2F02      1762          move.l  D2,-(A7)
08000FAA  2401      1763          move.l  D1,D2
08000FAC  4842      1764          swap    D2
08000FAE  C2C0      1765          mulu    D0,D1
08000FB0  C4C0      1766          mulu    D0,D2
08000FB2  4842      1767          swap    D2
08000FB4  4242      1768          clr.w   D2
08000FB6  D282      1769          add.l   D2,D1
08000FB8  241F      1770          move.l  (A7)+,D2
08000FBA  4E75      1771          rts
                    1772   domul_4:
08000FBC  48E7 3000 1773          movem.l D2/D3,-(A7)
08000FC0  2401      1774          move.l  D1,D2
08000FC2  2601      1775          move.l  D1,D3
08000FC4  C2C0      1776          mulu    D0,D1
08000FC6  4842      1777          swap    D2
08000FC8  C4C0      1778          mulu    D0,D2
08000FCA  4840      1779          swap    D0
08000FCC  C6C0      1780          mulu    D0,D3
08000FCE  D483      1781          add.l   D3,D2
08000FD0  4842      1782          swap    D2
08000FD2  4242      1783          clr.w   D2
08000FD4  D282      1784          add.l   D2,D1
08000FD6  4CDF 000C 1785          movem.l (A7)+,D2/D3
08000FDA  4E75      1786          rts
                    1787   _strlen:
08000FDC  206F 0004 1788          move.l    (4,A7),A0
08000FE0  2248      1789          move.l    A0,A1
                    1790   strlen_1:
08000FE2  4A19      1791          tst.b     (A1)+
08000FE4  66FC      1792          bne       strlen_1
08000FE6  2009      1793          move.l    A1,D0
08000FE8  9088      1794          sub.l     A0,D0
08000FEA  5380      1795          subq.l    #1,D0
08000FEC  4E75      1796          rts
                    1797   _putch:
08000FEE  4E56 0000 1798          link      A6,#0
08000FF2  48E7 2000 1799          movem.l   D2,-(A7)
08000FF6  242E 0008 1800          move.l    8(A6),D2
08000FFA  0C82 0000 1801          cmp.l     #10,D2
08000FFE  000A      
08001000  660A      1802          bne.s     putch_1
08001002  4878 000D 1803          pea       13
08001006  6100 F144 1804          bsr       __putch
0800100A  584F      1805          addq.w    #4,A7
                    1806   putch_1:
0800100C  2F02      1807          move.l    D2,-(A7)
0800100E  6100 F13C 1808          bsr       __putch
08001012  584F      1809          addq.w    #4,A7
08001014  2002      1810          move.l    D2,D0
08001016  4CDF 0004 1811          movem.l   (A7)+,D2
0800101A  4E5E      1812          unlk      A6
0800101C  4E75      1813          rts
                    1814   _toupper:
0800101E  4E56 0000 1815          link      A6,#0
08001022  48E7 2000 1816          movem.l   D2,-(A7)
08001026  242E 0008 1817          move.l    8(A6),D2
0800102A  0C82 0000 1818          cmp.l     #97,D2
0800102E  0061      
08001030  6D0E      1819          blt.s     toupper_1
08001032  0C82 0000 1820          cmp.l     #122,D2
08001036  007A      
08001038  6E06      1821          bgt.s     toupper_1
0800103A  C4BC 0000 1822          and.l     #95,D2
0800103E  005F      
                    1823   toupper_1:
08001040  2002      1824          move.l    D2,D0
08001042  4CDF 0004 1825          movem.l   (A7)+,D2
08001046  4E5E      1826          unlk      A6
08001048  4E75      1827          rts
                    1828   _strcpy:
0800104A  206F 0004 1829          move.l    (4,A7),A0
0800104E  226F 0008 1830          move.l    (8,A7),A1
08001052  2008      1831          move.l    A0,D0
                    1832   strcpy_1:
08001054  10D9      1833          move.b    (A1)+,(A0)+
08001056  66FC      1834          bne       strcpy_1
08001058  4E75      1835          rts
                    1836   ULDIV:
0800105A  4E56 0000 1837          link    A6,#0
0800105E  48E7 C000 1838          movem.l D0/D1,-(A7)
08001062  222E 0008 1839          move.l  8(A6),D1
08001066  202E 000C 1840          move.l  12(A6),D0
0800106A  6036      1841          bra.s   ldiv_3
                    1842   LDIV:
0800106C  4E56 0000 1843          link    A6,#0
08001070  48E7 C000 1844          movem.l D0/D1,-(A7)
08001074  222E 0008 1845          move.l  8(A6),D1
08001078  202E 000C 1846          move.l  12(A6),D0
0800107C  4A80      1847          tst.l   D0
0800107E  6A0E      1848          bpl.s   ldiv_1
08001080  4480      1849          neg.l   D0
08001082  4A81      1850          tst.l   D1
08001084  6A14      1851          bpl.s   ldiv_2
08001086  4481      1852          neg.l   D1
08001088  612A      1853          bsr.s   dodiv
0800108A  4481      1854          neg.l   D1
0800108C  6016      1855          bra.s   ldiv_4
                    1856   ldiv_1:
0800108E  4A81      1857          tst.l   D1
08001090  6A10      1858          bpl.s   ldiv_3
08001092  4481      1859          neg.l   D1
08001094  611E      1860          bsr.s   dodiv
08001096  4480      1861          neg.l   D0
08001098  600A      1862          bra.s   ldiv_4
                    1863   ldiv_2:
0800109A  6118      1864          bsr.s   dodiv
0800109C  4480      1865          neg.l   D0
0800109E  4481      1866          neg.l   D1
080010A0  6002      1867          bra.s   ldiv_4
                    1868   ldiv_3:
080010A2  6110      1869          bsr.s   dodiv
                    1870   ldiv_4:
080010A4  2D40 0008 1871          move.l  D0,8(A6)
080010A8  2D41 000C 1872          move.l  D1,12(A6)
080010AC  4CDF 0003 1873          movem.l (A7)+,D0/D1
080010B0  4E5E      1874          unlk    A6
080010B2  4E75      1875          rts
                    1876   dodiv:
080010B4  0C81 0000 1877          cmpi.l  #$FFFF,D1
080010B8  FFFF      
080010BA  6236      1878          bhi.s   dodiv_2
080010BC  0C80 0000 1879          cmpi.l  #$FFFF,D0
080010C0  FFFF      
080010C2  6210      1880          bhi.s   dodiv_1
080010C4  80C1      1881          divu    D1,D0
080010C6  2200      1882          move.l  D0,D1
080010C8  4241      1883          clr.w   D1
080010CA  4841      1884          swap    D1
080010CC  0280 0000 1885          andi.l  #$FFFF,D0
080010D0  FFFF      
080010D2  4E75      1886          rts
                    1887   dodiv_1:
080010D4  48A7 A000 1888          movem.w D0/D2,-(A7)
080010D8  4240      1889          clr.w   D0
080010DA  4840      1890          swap    D0
080010DC  80C1      1891          divu    D1,D0
080010DE  3400      1892          move.w  D0,D2
080010E0  301F      1893          move.w  (A7)+,D0
080010E2  80C1      1894          divu    D1,D0
080010E4  4840      1895          swap    D0
080010E6  4281      1896          clr.l   D1
080010E8  3200      1897          move.w  D0,D1
080010EA  3002      1898          move.w  D2,D0
080010EC  4840      1899          swap    D0
080010EE  341F      1900          move.w  (A7)+,D2
080010F0  4E75      1901          rts
                    1902   dodiv_2:
080010F2  48E7 3800 1903          movem.l D2/D3/D4,-(A7)
080010F6  2401      1904          move.l  D1,D2
080010F8  4242      1905          clr.w   D2
080010FA  4842      1906          swap    D2
080010FC  5282      1907          addq.l  #1,D2
080010FE  2600      1908          move.l  D0,D3
08001100  2801      1909          move.l  D1,D4
08001102  2202      1910          move.l  D2,D1
08001104  61CE      1911          bsr.s   dodiv_1
08001106  2204      1912          move.l  D4,D1
08001108  82C2      1913          divu    D2,D1
0800110A  80C1      1914          divu    D1,D0
0800110C  0280 0000 1915          andi.l  #$FFFF,D0
08001110  FFFF      
                    1916   dodiv_3:
08001112  2204      1917          move.l  D4,D1
08001114  2404      1918          move.l  D4,D2
08001116  4842      1919          swap    D2
08001118  C2C0      1920          mulu    D0,D1
0800111A  C4C0      1921          mulu    D0,D2
0800111C  4842      1922          swap    D2
0800111E  D282      1923          add.l   D2,D1
08001120  9283      1924          sub.l   D3,D1
08001122  620A      1925          bhi.s   dodiv_4
08001124  4481      1926          neg.l   D1
08001126  B881      1927          cmp.l   D1,D4
08001128  6208      1928          bhi.s   dodiv_5
0800112A  5280      1929          addq.l  #1,D0
0800112C  60E4      1930          bra.s   dodiv_3
                    1931   dodiv_4:
0800112E  5380      1932          subq.l  #1,D0
08001130  60E0      1933          bra.s   dodiv_3
                    1934   dodiv_5:
08001132  4CDF 001C 1935          movem.l (A7)+,D2/D3/D4
08001136  4E75      1936          rts
                    1937          section   const
08001138            1938                   align
                    1939   
                    1940   
                    1941   @m68kus~1_1:
08001138  0D0A 4465 1942          dc.b      13,10,68,101,118,105,99,101,32,105,115,32,110
0800113C  7669 6365 
08001140  2069 7320 
08001144  6E        
08001145  6F74 2072 1943          dc.b      111,116,32,114,101,97,100,121,0
08001149  6561 6479 
0800114D  00        
                    1944   @m68kus~1_2:
0800114E  0D0A 4465 1945          dc.b      13,10,68,101,118,105,99,101,32,105,115,32,114
08001152  7669 6365 
08001156  2069 7320 
0800115A  72        
0800115B  6561 6479 1946          dc.b      101,97,100,121,0
0800115F  00        
                    1947   @m68kus~1_3:
08001160  0D0A 2053 1948          dc.b      13,10,32,83,101,110,116,32,99,111,110,116,114
08001164  656E 7420 
08001168  636F 6E74 
0800116C  72        
0800116D  6F6C 2062 1949          dc.b      111,108,32,98,121,116,101,0
08001171  7974 6500 
                    1950   @m68kus~1_4:
08001176  0D0A 2053 1951          dc.b      13,10,32,83,101,110,116,32,97,100,100,114,101
0800117A  656E 7420 
0800117E  6164 6472 
08001182  65        
08001183  7373 2062 1952          dc.b      115,115,32,98,121,116,101,115,0
08001187  7974 6573 
0800118B  00        
                    1953   @m68kus~1_5:
0800118C  0D0A 4465 1954          dc.b      13,10,68,101,118,105,99,101,32,110,111,116,32
08001190  7669 6365 
08001194  206E 6F74 
08001198  20        
08001199  7265 6164 1955          dc.b      114,101,97,100,121,0
0800119D  7900      
                    1956   @m68kus~1_6:
080011A0  0D0A 4465 1957          dc.b      13,10,68,101,118,105,99,101,32,114,101,97,100
080011A4  7669 6365 
080011A8  2072 6561 
080011AC  64        
080011AD  7900      1958          dc.b      121,0
                    1959   @m68kus~1_7:
080011B0  0D0A 2049 1960          dc.b      13,10,32,73,50,67,95,67,77,68,82,58,32,48,120
080011B4  3243 5F43 
080011B8  4D44 523A 
080011BC  2030 78   
080011BF  3032 00   1961          dc.b      48,50,0
                    1962   @m68kus~1_8:
080011C2  0D0A 5365 1963          dc.b      13,10,83,101,110,116,32,67,111,110,116,114,111
080011C6  6E74 2043 
080011CA  6F6E 7472 
080011CE  6F        
080011CF  6C20 6279 1964          dc.b      108,32,98,121,116,101,0
080011D3  7465 00   
                    1965   @m68kus~1_9:
080011D6  0D0A 5365 1966          dc.b      13,10,83,101,110,116,32,49,115,116,32,97,100
080011DA  6E74 2031 
080011DE  7374 2061 
080011E2  64        
080011E3  6472 6573 1967          dc.b      100,114,101,115,115,0
080011E7  7300      
                    1968   @m68kus~1_10:
080011EA  0D0A 5365 1969          dc.b      13,10,83,101,110,116,32,50,110,100,32,97,100
080011EE  6E74 2032 
080011F2  6E64 2061 
080011F6  64        
080011F7  6472 6573 1970          dc.b      100,114,101,115,115,0
080011FB  7300      
                    1971   @m68kus~1_11:
080011FE  0D0A 5265 1972          dc.b      13,10,82,101,97,100,58,32,37,48,50,120,32,102
08001202  6164 3A20 
08001206  2530 3278 
0800120A  2066      
0800120C  726F 6D20 1973          dc.b      114,111,109,32,97,100,100,114,101,115,115,32
08001210  6164 6472 
08001214  6573 7320 
08001218  2530 3278 1974          dc.b      37,48,50,120,13,10,0
0800121C  0D0A 00   
                    1975   @m68kus~1_12:
08001220  0D0A 2053 1976          dc.b      13,10,32,83,101,110,116,32,115,116,111,112,32
08001224  656E 7420 
08001228  7374 6F70 
0800122C  20        
0800122D  636F 6D6D 1977          dc.b      99,111,109,109,97,110,100,0
08001231  616E 6400 
                    1978   @m68kus~1_13:
08001236  0D0A 5365 1979          dc.b      13,10,83,101,110,116,32,115,101,99,111,110,100
0800123A  6E74 2073 
0800123E  6563 6F6E 
08001242  64        
08001243  2063 6F6E 1980          dc.b      32,99,111,110,116,114,111,108,32,98,121,116
08001247  7472 6F6C 
0800124B  2062 7974 
0800124F  650A 00   1981          dc.b      101,10,0
                    1982   @m68kus~1_14:
08001252  2530 3278 1983          dc.b      37,48,50,120,32,0
08001256  2000      
                    1984          section   data
08001258            1985                   align
                    1986   
                    1987   *********************************************************************************************************************************************************
                    1988   * Section for Initialised Data (in theory should be copied to Ram at startup) but is part of program code as we copy whole program to ram at startup
                    1989   ********************************************************************************************************************************************************
                    1990   
          0800 1258 1991   DataStart       equ       *
08001258            1992   __ungetbuf:     ds.l      1                    ungetbuffer for stdio functions
0800125C            1993   __allocp:       ds.l      1                    start of free memory block list
08001260            1994   __heap:         ds.l      1                    begin of free memory
                    1995   
                    1996   
                    1997   @itoa_1:
08001264  2D32 3134 1998          dc.b      45,50,49,52,55,52,56,51,54,52,56,0
08001268  3734 3833 
0800126C  3634 3800 
                    1999          section   bss
08001270            2000                   align
                    2001   
          0800 1270 2002   DataEnd         equ       *                    this label will equate to the address of the last byte of global variable in it
          0000 0018 2003   DataLength      equ       DataEnd-DataStart    length of data needed to copy to Ram on bootup
                    2004   
                    2005   *********************************************************************************************************
                    2006   * Section for uninitialised Data which is set to zero, i.e. we should set this space to zero at starup
                    2007   *********************************************************************************************************
          0800 1270 2008   BssStart       equ       *
                    2009   
                    2010          section   heap
08001270            2011                  align
                    2012   
          0800 1270 2013   BssEnd         equ       *
          0000 0000 2014   BssLength      equ       BssEnd-BssStart       length of zeroed data needed to copy to Ram on bootup
                    2015   
                    2016   *********************************************************************************************************
                    2017   * Section for Heap
                    2018   *********************************************************************************************************
                    2019   
          0800 1270 2020   heap           equ       *
08001270            2021                  align
          0800 0000

Assembly errors: 0
