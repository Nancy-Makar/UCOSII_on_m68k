       section   code
**********************************************************************************************************
* CSTART.ASM  -  C startup-code
*
*          Initialises the system prior to running the users main() program
*
*          1) Sets up the user program stack pointer
*          2) Switches to User mode in the 68000
*          3) Enables All Interrupts 1-7 on 68000
*          4) Copies all initialised C program variables from Rom to Ram prior to running main()
*
**********************************************************************************************************
                align


**********************************************************************************************************
* The Following ORG Statement marks the address of the start of the this CStart Program
*
* The debug Monitor and Flash Load and Program routines assume your program lives here
**********************************************************************************************************
                org       $08000000
start:          move.w    #$2000,SR             clear interrupts to enable all, move to supervisor mode

******************************************************************************************
* Set unitialised global variables to 0 at startup
******************************************************************************************
mainloop        movea.l   #BssStart,a0          point a0 to the start of the initialised data section held in ROM
                move.l    #BssLength,d0         figure out how many bytes of C program variables data to copy
                beq       go_main               if no data to copy go straight to program
Zeroinit        move.b    #0,(a0)+              copy the C program initialise variables from rom to ram
                subq.l    #1,d0
                bne       Zeroinit

*******************************************************************************************
* last minute initialisation before calling main
*******************************************************************************************

                move.l    #-1,__ungetbuf         required for use of scanf() etc in C programs
                clr.l     __allocp               used by malloc() in C
                move.l    #heap,__heap           pointer to free memory
go_main         jsr       _main
                bra       start

; C:\CPEN412\GITHUB_STEUP\M68KV6.0 - 800BY480\PROGRAMS\DEBUGMONITORCODE\M68KUSERPROGRAM (DE1).C - Compiled by CC68K  Version 5.00 (c) 1991-2005  Peter J. Fondse
; #include <stdio.h>
; /*********************************************************************************************
; **	RS232 port addresses
; *********************************************************************************************/
; #define RS232_Control *(volatile unsigned char *)(0x00400040)
; #define RS232_Status *(volatile unsigned char *)(0x00400040)
; #define RS232_TxData *(volatile unsigned char *)(0x00400042)
; #define RS232_RxData *(volatile unsigned char *)(0x00400042)
; #define RS232_Baud *(volatile unsigned char *)(0x00400044)
; /*************************************************************
; ** I2C Controller registers
; **************************************************************/
; #define I2C_PRESCALE_LOW (*(volatile unsigned char *)(0x00408000))
; #define I2C_PRESCALE_HIGH (*(volatile unsigned char *)(0x00408002))
; #define I2C_CTR (*(volatile unsigned char *)(0x00408004))
; #define I2C_TxRx (*(volatile unsigned char *)(0x00408006))
; #define I2C_CMDR (*(volatile unsigned char *)(0x00408008))
; // Constants specific to EEPROM
; #define CTR_BYTE 0x0A
; #define B0 0x00
; #define A0 0x00
; #define A1 0x00
; // IIC command register bit masks
; #define I2C_CTR_STA 0x80
; #define I2C_CTR_STO 0x40
; #define I2C_CTR_RD 0x20
; #define I2C_CTR_WR 0x10
; #define I2C_CTR_ACK 0x08
; #define I2C_CTR_IACK 0x01
; // IIC status register bit masks
; #define IIC_SR_RxAck 0x80
; #define IIC_SR_Busy 0x40
; #define IIC_SR_AL 0x20
; #define IIC_SR_TIP 0x02 // 1 while transferring, 0 when complete
; #define IIC_SR_IF 0x01  // poll to see when data is received
; /*********************************************************************************************************************************
; (( DO NOT initialise global variables here, do it main even if you want 0
; (( it's a limitation of the compiler
; (( YOU HAVE BEEN WARNED
; *********************************************************************************************************************************/
; // IIC Function Prototypes
; void I2C_Init(void);
; void I2C_Start(unsigned char WR_RD);
; void I2C_Stop(void);
; void WaitForDevice(void);
; void TransmitContolByteToEEPROM(unsigned char WE);
; void WaitForRxACK(void);
; void WaitForSRTIPFlag(void);
; void EEPROMWriteByte(unsigned char data, char upper_address, char lower_address);
; void WaitForDeviceReadyandAck(void);
; void EEPROMReadByte(unsigned char data, unsigned char lower_address);
; void EEPROMWritePage(unsigned char data);
; void EEPROMReadPage(void);
; /*****************************************************************************************
; **	Interrupt service routine for Timers
; **
; **  Timers 1 - 4 share a common IRQ on the CPU  so this function uses polling to figure
; **  out which timer is producing the interrupt
; **
; *****************************************************************************************/
; // converts hex char to 4 bit binary equiv in range 0000-1111 (0-F)
; // char assumed to be a valid hex char 0-9, a-f, A-F
; char xtod(int c)
; {
_xtod:
       link      A6,#0
       move.l    D2,-(A7)
       move.l    8(A6),D2
; if ((char)(c) <= (char)('9'))
       cmp.b     #57,D2
       bgt.s     xtod_1
; return c - (char)(0x30);      // 0 - 9 = 0x30 - 0x39 so convert to number by sutracting 0x30
       move.b    D2,D0
       sub.b     #48,D0
       bra.s     xtod_3
xtod_1:
; else if ((char)(c) > (char)('F')) // assume lower case
       cmp.b     #70,D2
       ble.s     xtod_4
; return c - (char)(0x57);      // a-f = 0x61-66 so needs to be converted to 0x0A - 0x0F so subtract 0x57
       move.b    D2,D0
       sub.b     #87,D0
       bra.s     xtod_3
xtod_4:
; else
; return c - (char)(0x37); // A-F = 0x41-46 so needs to be converted to 0x0A - 0x0F so subtract 0x37
       move.b    D2,D0
       sub.b     #55,D0
xtod_3:
       move.l    (A7)+,D2
       unlk      A6
       rts
; }
; int Get2HexDigits(char *CheckSumPtr)
; {
_Get2HexDigits:
       link      A6,#0
       move.l    D2,-(A7)
; register int i = (xtod(_getch()) << 4) | (xtod(_getch()));
       move.l    D0,-(A7)
       jsr       __getch
       move.l    D0,D1
       move.l    (A7)+,D0
       move.l    D1,-(A7)
       jsr       _xtod
       addq.w    #4,A7
       and.l     #255,D0
       asl.l     #4,D0
       move.l    D0,-(A7)
       move.l    D1,-(A7)
       jsr       __getch
       move.l    (A7)+,D1
       move.l    D0,-(A7)
       jsr       _xtod
       addq.w    #4,A7
       move.l    D0,D1
       move.l    (A7)+,D0
       and.l     #255,D1
       or.l      D1,D0
       move.l    D0,D2
; if (CheckSumPtr)
       tst.l     8(A6)
       beq.s     Get2HexDigits_1
; *CheckSumPtr += i;
       move.l    8(A6),A0
       add.b     D2,(A0)
Get2HexDigits_1:
; return i;
       move.l    D2,D0
       move.l    (A7)+,D2
       unlk      A6
       rts
; }
; int Get4HexDigits(char *CheckSumPtr)
; {
_Get4HexDigits:
       link      A6,#0
; return (Get2HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
       move.l    8(A6),-(A7)
       jsr       _Get2HexDigits
       addq.w    #4,A7
       asl.l     #8,D0
       move.l    D0,-(A7)
       move.l    8(A6),-(A7)
       jsr       _Get2HexDigits
       addq.w    #4,A7
       move.l    D0,D1
       move.l    (A7)+,D0
       or.l      D1,D0
       unlk      A6
       rts
; }
; int Get6HexDigits(char *CheckSumPtr)
; {
_Get6HexDigits:
       link      A6,#0
; return (Get4HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
       move.l    8(A6),-(A7)
       jsr       _Get4HexDigits
       addq.w    #4,A7
       asl.l     #8,D0
       move.l    D0,-(A7)
       move.l    8(A6),-(A7)
       jsr       _Get2HexDigits
       addq.w    #4,A7
       move.l    D0,D1
       move.l    (A7)+,D0
       or.l      D1,D0
       unlk      A6
       rts
; }
; int Get8HexDigits(char *CheckSumPtr)
; {
_Get8HexDigits:
       link      A6,#0
; return (Get4HexDigits(CheckSumPtr) << 16) | (Get4HexDigits(CheckSumPtr));
       move.l    8(A6),-(A7)
       jsr       _Get4HexDigits
       addq.w    #4,A7
       asl.l     #8,D0
       asl.l     #8,D0
       move.l    D0,-(A7)
       move.l    8(A6),-(A7)
       jsr       _Get4HexDigits
       addq.w    #4,A7
       move.l    D0,D1
       move.l    (A7)+,D0
       or.l      D1,D0
       unlk      A6
       rts
; }
; int _putch( int c)
; {
__putch:
       link      A6,#0
; while((RS232_Status & (char)(0x02)) != (char)(0x02))    // wait for Tx bit in status register or 6850 serial comms chip to be '1'
_putch_1:
       move.b    4194368,D0
       and.b     #2,D0
       cmp.b     #2,D0
       beq.s     _putch_3
       bra       _putch_1
_putch_3:
; ;
; RS232_TxData = (c & (char)(0x7f));                      // write to the data register to output the character (mask off bit 8 to keep it 7 bit ASCII)
       move.l    8(A6),D0
       and.l     #127,D0
       move.b    D0,4194370
; return c ;                                              // putchar() expects the character to be returned
       move.l    8(A6),D0
       unlk      A6
       rts
; }
; /*********************************************************************************************************
; **  Subroutine to provide a low level input function to 6850 ACIA
; **  This routine provides the basic functionality to input a single character from the serial Port
; **  to allow the board to communicate with HyperTerminal Program Keyboard (your PC)
; **
; **  NOTE you do not call this function directly, instead you call the normal getchar() function
; **  which in turn calls _getch() below). Other functions like gets(), scanf() call getchar() so will
; **  call _getch() also
; *********************************************************************************************************/
; int _getch( void )
; {
__getch:
       link      A6,#-4
; char c ;
; while((RS232_Status & (char)(0x01)) != (char)(0x01))    // wait for Rx bit in 6850 serial comms chip status register to be '1'
_getch_1:
       move.b    4194368,D0
       and.b     #1,D0
       cmp.b     #1,D0
       beq.s     _getch_3
       bra       _getch_1
_getch_3:
; ;
; return (RS232_RxData & (char)(0x7f));                   // read received character, mask off top bit and return as 7 bit ASCII character
       move.b    4194370,D0
       and.l     #255,D0
       and.l     #127,D0
       unlk      A6
       rts
; }
; void I2C_Start(unsigned char WR_RD)
; {
_I2C_Start:
       link      A6,#0
; I2C_CMDR = I2C_CTR_STA | WR_RD ;
       move.w    #128,D0
       move.b    11(A6),D1
       and.w     #255,D1
       or.w      D1,D0
       move.b    D0,4227080
       unlk      A6
       rts
; }
; void I2C_Stop(void)
; {
_I2C_Stop:
; I2C_CMDR = I2C_CTR_STO;
       move.b    #64,4227080
       rts
; }
; void I2C_Init(void)
; {
_I2C_Init:
; // Make sure I2C core is off before adjusting soft core clock
; I2C_CTR = 0x00;
       clr.b     4227076
; // Set SCL frequency to 100kHz
; I2C_PRESCALE_LOW = 0x31;
       move.b    #49,4227072
; I2C_PRESCALE_HIGH = 0x00;
       clr.b     4227074
; // Enable core and disable interrupts
; I2C_CTR = (I2C_CTR & 0x3F) | (1 << 7);
       move.b    4227076,D0
       and.b     #63,D0
       or.b      #128,D0
       move.b    D0,4227076
       rts
; }
; void TransmitByte(unsigned char data)
; {
_TransmitByte:
       link      A6,#0
; I2C_TxRx = data;
       move.b    11(A6),4227078
       unlk      A6
       rts
; }
; void TransmitContolByteToEEPROM(unsigned char WE)
; {
_TransmitContolByteToEEPROM:
       link      A6,#0
; TransmitByte((CTR_BYTE << 4) | (B0 << 3) | (A1 << 2) | (A0 << 1) | WE);
       move.w    #160,D1
       or.b      11(A6),D1
       and.l     #255,D1
       move.l    D1,-(A7)
       jsr       _TransmitByte
       addq.w    #4,A7
       unlk      A6
       rts
; }
; void WaitForRxACK(void)
; {
_WaitForRxACK:
; // Status Register [7] == 0
; while (I2C_CMDR & 0x80);
WaitForRxACK_1:
       move.b    4227080,D0
       and.w     #255,D0
       and.w     #128,D0
       beq.s     WaitForRxACK_3
       bra       WaitForRxACK_1
WaitForRxACK_3:
       rts
; }
; void WaitForDevice(void)
; {
_WaitForDevice:
; // Status Register bits 7,6,1,0 should be 0
; while (I2C_CMDR & 0xC2);
WaitForDevice_1:
       move.b    4227080,D0
       and.w     #255,D0
       and.w     #194,D0
       beq.s     WaitForDevice_3
       bra       WaitForDevice_1
WaitForDevice_3:
       rts
; }
; void WaitForSRTIPFlag(void) {
_WaitForSRTIPFlag:
; while (I2C_CMDR & IIC_SR_TIP);
WaitForSRTIPFlag_1:
       move.b    4227080,D0
       and.b     #2,D0
       beq.s     WaitForSRTIPFlag_3
       bra       WaitForSRTIPFlag_1
WaitForSRTIPFlag_3:
       rts
; }
; void WaitForDeviceReadyandAck(void)
; {
_WaitForDeviceReadyandAck:
; WaitForDevice();
       jsr       _WaitForDevice
; WaitForRxACK();
       jsr       _WaitForRxACK
       rts
; }
; void EEPROMWriteByte(unsigned char data, char upper_address, char lower_address)
; {
_EEPROMWriteByte:
       link      A6,#0
       movem.l   A2/A3/A4/A5,-(A7)
       lea       _WaitForRxACK.L,A2
       lea       _WaitForSRTIPFlag.L,A3
       lea       _printf.L,A4
       lea       _TransmitByte.L,A5
; printf("\r\nDevice is not ready");
       pea       @m68kus~1_1.L
       jsr       (A4)
       addq.w    #4,A7
; WaitForDevice();
       jsr       _WaitForDevice
; printf("\r\nDevice is ready");
       pea       @m68kus~1_2.L
       jsr       (A4)
       addq.w    #4,A7
; TransmitContolByteToEEPROM(0x00);
       clr.l     -(A7)
       jsr       _TransmitContolByteToEEPROM
       addq.w    #4,A7
; I2C_CMDR =  I2C_CTR_STA | I2C_CTR_WR | I2C_CTR_IACK;
       move.b    #145,4227080
; // I2C_CMDR = 0X91;
; WaitForSRTIPFlag();
       jsr       (A3)
; WaitForRxACK();
       jsr       (A2)
; printf("\r\n Sent control byte");
       pea       @m68kus~1_3.L
       jsr       (A4)
       addq.w    #4,A7
; // Transmit EEPROM internal address, high byte followed by low byte
; TransmitByte(upper_address);
       move.b    15(A6),D1
       and.l     #255,D1
       move.l    D1,-(A7)
       jsr       (A5)
       addq.w    #4,A7
; I2C_CMDR = I2C_CTR_WR | I2C_CTR_IACK;
       move.b    #17,4227080
; //I2C_CMDR = 0x11;
; WaitForSRTIPFlag();
       jsr       (A3)
; WaitForRxACK();
       jsr       (A2)
; TransmitByte(lower_address);
       move.b    19(A6),D1
       and.l     #255,D1
       move.l    D1,-(A7)
       jsr       (A5)
       addq.w    #4,A7
; I2C_CMDR = I2C_CTR_WR | I2C_CTR_IACK;
       move.b    #17,4227080
; // I2C_CMDR = 0x11;
; WaitForSRTIPFlag();
       jsr       (A3)
; WaitForRxACK();
       jsr       (A2)
; printf("\r\n Sent address bytes");
       pea       @m68kus~1_4.L
       jsr       (A4)
       addq.w    #4,A7
; // Transmit byte to be written in EEPROM
; TransmitByte(data);
       move.b    11(A6),D1
       and.l     #255,D1
       move.l    D1,-(A7)
       jsr       (A5)
       addq.w    #4,A7
; I2C_CMDR = I2C_CTR_STO | I2C_CTR_WR | I2C_CTR_IACK;
       move.b    #81,4227080
; WaitForSRTIPFlag();
       jsr       (A3)
; WaitForRxACK();
       jsr       (A2)
       movem.l   (A7)+,A2/A3/A4/A5
       unlk      A6
       rts
; }
; int I2C_Check_Read(void) {
_I2C_Check_Read:
       link      A6,#-4
; int value = I2C_CTR;
       move.b    4227076,D0
       and.l     #255,D0
       move.l    D0,-4(A6)
; return ((value & 0x01) == 0x01);
       move.l    -4(A6),D0
       and.l     #1,D0
       cmp.l     #1,D0
       bne.s     I2C_Check_Read_1
       moveq     #1,D0
       bra.s     I2C_Check_Read_2
I2C_Check_Read_1:
       clr.l     D0
I2C_Check_Read_2:
       unlk      A6
       rts
; }
; void WaitForI2CRead(void) {
_WaitForI2CRead:
; while (I2C_Check_Read() == 0) {
WaitForI2CRead_1:
       jsr       _I2C_Check_Read
       tst.l     D0
       bne.s     WaitForI2CRead_3
; //do nothing
; }
       bra       WaitForI2CRead_1
WaitForI2CRead_3:
       rts
; }
; void EEPROMReadByte(unsigned char upper_address, unsigned char lower_address)
; {
_EEPROMReadByte:
       link      A6,#-4
       movem.l   A2/A3/A4,-(A7)
       lea       _printf.L,A2
       lea       _WaitForSRTIPFlag.L,A3
       lea       _WaitForRxACK.L,A4
; unsigned char byteRead;
; // Check that the SPI bus is not busy
; printf("\r\nDevice not ready");
       pea       @m68kus~1_5.L
       jsr       (A2)
       addq.w    #4,A7
; WaitForDevice(); // only check the busy bit
       jsr       _WaitForDevice
; printf("\r\nDevice ready");
       pea       @m68kus~1_6.L
       jsr       (A2)
       addq.w    #4,A7
; // Transmit Control Byte
; TransmitContolByteToEEPROM(0x00);
       clr.l     -(A7)
       jsr       _TransmitContolByteToEEPROM
       addq.w    #4,A7
; // 0x91
; I2C_CMDR = I2C_CTR_STA | I2C_CTR_WR | I2C_CTR_IACK;
       move.b    #145,4227080
; printf("\r\n I2C_CMDR: 0x02", I2C_CMDR);
       move.b    4227080,D1
       and.l     #255,D1
       move.l    D1,-(A7)
       pea       @m68kus~1_7.L
       jsr       (A2)
       addq.w    #8,A7
; WaitForSRTIPFlag();
       jsr       (A3)
; WaitForRxACK();
       jsr       (A4)
; printf("\r\nSent Control byte");
       pea       @m68kus~1_8.L
       jsr       (A2)
       addq.w    #4,A7
; // Transmit EEPROM internal address, high byte followed by low byte
; TransmitByte(upper_address);
       move.b    11(A6),D1
       and.l     #255,D1
       move.l    D1,-(A7)
       jsr       _TransmitByte
       addq.w    #4,A7
; I2C_CMDR = I2C_CTR_WR | I2C_CTR_IACK;
       move.b    #17,4227080
; WaitForSRTIPFlag();
       jsr       (A3)
; WaitForRxACK();
       jsr       (A4)
; printf("\r\nSent 1st address");
       pea       @m68kus~1_9.L
       jsr       (A2)
       addq.w    #4,A7
; TransmitByte(lower_address);
       move.b    15(A6),D1
       and.l     #255,D1
       move.l    D1,-(A7)
       jsr       _TransmitByte
       addq.w    #4,A7
; I2C_CMDR = I2C_CTR_WR | I2C_CTR_IACK;
       move.b    #17,4227080
; WaitForSRTIPFlag();
       jsr       (A3)
; WaitForRxACK();
       jsr       (A4)
; printf("\r\nSent 2nd address");
       pea       @m68kus~1_10.L
       jsr       (A2)
       addq.w    #4,A7
; // Send repeated start and control byte with RD flag set
; TransmitContolByteToEEPROM(0x01);
       pea       1
       jsr       _TransmitContolByteToEEPROM
       addq.w    #4,A7
; /**I2C_CMDR = I2C_CTR_STA | I2C_CTR_WR | I2C_CTR_IACK;
; //I2C_CMDR = 0x69;
; WaitForSRTIPFlag();
; WaitForRxACK();
; printf("\r\nSent second control byte");**/
; I2C_CMDR = I2C_CTR_STO | I2C_CTR_RD | I2C_CTR_IACK;
       move.b    #97,4227080
; WaitForSRTIPFlag();
       jsr       (A3)
; byteRead = I2C_TxRx;
       move.b    4227078,-1(A6)
; printf("\r\nRead: %02x from address %02x\r\n", byteRead, lower_address);
       move.b    15(A6),D1
       and.l     #255,D1
       move.l    D1,-(A7)
       move.b    -1(A6),D1
       and.l     #255,D1
       move.l    D1,-(A7)
       pea       @m68kus~1_11.L
       jsr       (A2)
       add.w     #12,A7
; I2C_CMDR = I2C_CTR_STO;
       move.b    #64,4227080
       movem.l   (A7)+,A2/A3/A4
       unlk      A6
       rts
; }
; void EEPROMWritePage(unsigned char data) {
_EEPROMWritePage:
       link      A6,#0
       movem.l   D2/A2/A3/A4/A5,-(A7)
       lea       _printf.L,A2
       lea       _WaitForRxACK.L,A3
       lea       _WaitForSRTIPFlag.L,A4
       lea       _TransmitByte.L,A5
; unsigned char i;
; // Check that the SPI bus is not busy
; printf("\r\nDevice is not ready");
       pea       @m68kus~1_1.L
       jsr       (A2)
       addq.w    #4,A7
; WaitForDevice();
       jsr       _WaitForDevice
; printf("\r\nDevice is ready");
       pea       @m68kus~1_2.L
       jsr       (A2)
       addq.w    #4,A7
; TransmitContolByteToEEPROM(0x00);
       clr.l     -(A7)
       jsr       _TransmitContolByteToEEPROM
       addq.w    #4,A7
; I2C_CMDR =  I2C_CTR_STA | I2C_CTR_WR | I2C_CTR_IACK;
       move.b    #145,4227080
; // I2C_CMDR = 0X91;
; WaitForSRTIPFlag();
       jsr       (A4)
; WaitForRxACK();
       jsr       (A3)
; printf("\r\n Sent control byte");
       pea       @m68kus~1_3.L
       jsr       (A2)
       addq.w    #4,A7
; // Transmit EEPROM internal address, high byte followed by low byte
; TransmitByte(0x00);
       clr.l     -(A7)
       jsr       (A5)
       addq.w    #4,A7
; I2C_CMDR = I2C_CTR_WR | I2C_CTR_IACK;
       move.b    #17,4227080
; //I2C_CMDR = 0x11;
; WaitForSRTIPFlag();
       jsr       (A4)
; WaitForRxACK();
       jsr       (A3)
; TransmitByte(0x00);
       clr.l     -(A7)
       jsr       (A5)
       addq.w    #4,A7
; I2C_CMDR = I2C_CTR_WR | I2C_CTR_IACK;
       move.b    #17,4227080
; // I2C_CMDR = 0x11;
; WaitForSRTIPFlag();
       jsr       (A4)
; WaitForRxACK();
       jsr       (A3)
; printf("\r\n Sent address bytes");
       pea       @m68kus~1_4.L
       jsr       (A2)
       addq.w    #4,A7
; // Transmit bytes to be written in EEPROM
; // 128 bytes
; for (i = 0x0; i < 0x80; i++) {
       clr.b     D2
EEPROMWritePage_1:
       and.w     #255,D2
       cmp.w     #128,D2
       bhs.s     EEPROMWritePage_3
; // Transmit byte to be written in EEPROM
; TransmitByte(i);
       and.l     #255,D2
       move.l    D2,-(A7)
       jsr       (A5)
       addq.w    #4,A7
; I2C_CMDR = I2C_CTR_WR | I2C_CTR_IACK;
       move.b    #17,4227080
; WaitForRxACK();
       jsr       (A3)
; WaitForSRTIPFlag();
       jsr       (A4)
       addq.b    #1,D2
       bra       EEPROMWritePage_1
EEPROMWritePage_3:
; }
; I2C_CMDR = I2C_CTR_STO | I2C_CTR_WR | I2C_CTR_IACK;
       move.b    #81,4227080
; printf("\r\n Sent stop command");
       pea       @m68kus~1_12.L
       jsr       (A2)
       addq.w    #4,A7
       movem.l   (A7)+,D2/A2/A3/A4/A5
       unlk      A6
       rts
; }
; void EEPROMReadPage() {
_EEPROMReadPage:
       link      A6,#-4
       movem.l   D2/A2/A3/A4,-(A7)
       lea       _printf.L,A2
       lea       _WaitForRxACK.L,A3
       lea       _WaitForSRTIPFlag.L,A4
; unsigned char i;
; unsigned char byteRead;
; // Check that the SPI bus is not busy
; printf("\r\nDevice not ready");
       pea       @m68kus~1_5.L
       jsr       (A2)
       addq.w    #4,A7
; WaitForDevice();
       jsr       _WaitForDevice
; printf("\r\nDevice ready");
       pea       @m68kus~1_6.L
       jsr       (A2)
       addq.w    #4,A7
; // Transmit Control Byte
; TransmitContolByteToEEPROM(0x00);
       clr.l     -(A7)
       jsr       _TransmitContolByteToEEPROM
       addq.w    #4,A7
; I2C_CMDR = I2C_CTR_STA | I2C_CTR_WR | I2C_CTR_IACK;
       move.b    #145,4227080
; WaitForSRTIPFlag();
       jsr       (A4)
; WaitForRxACK();
       jsr       (A3)
; printf("\r\nSent Control byte");
       pea       @m68kus~1_8.L
       jsr       (A2)
       addq.w    #4,A7
; // Transmit EEPROM internal address, high byte followed by low byte
; TransmitByte(0x00);
       clr.l     -(A7)
       jsr       _TransmitByte
       addq.w    #4,A7
; I2C_CMDR = I2C_CTR_WR | I2C_CTR_IACK;
       move.b    #17,4227080
; WaitForSRTIPFlag();
       jsr       (A4)
; WaitForRxACK();
       jsr       (A3)
; printf("\r\nSent 1st address");
       pea       @m68kus~1_9.L
       jsr       (A2)
       addq.w    #4,A7
; TransmitByte(0x00);
       clr.l     -(A7)
       jsr       _TransmitByte
       addq.w    #4,A7
; I2C_CMDR = I2C_CTR_WR | I2C_CTR_IACK;
       move.b    #17,4227080
; WaitForSRTIPFlag();
       jsr       (A4)
; WaitForRxACK();
       jsr       (A3)
; printf("\r\nSent 2nd address");
       pea       @m68kus~1_10.L
       jsr       (A2)
       addq.w    #4,A7
; // Send repeated start and control byte with RD flag set
; TransmitContolByteToEEPROM(0x01);
       pea       1
       jsr       _TransmitContolByteToEEPROM
       addq.w    #4,A7
; I2C_CMDR = I2C_CTR_STA | I2C_CTR_WR | I2C_CTR_IACK;
       move.b    #145,4227080
; //I2C_CMDR = 0x69;
; WaitForSRTIPFlag();
       jsr       (A4)
; WaitForRxACK();
       jsr       (A3)
; printf("\r\nSent second control byte\n");
       pea       @m68kus~1_13.L
       jsr       (A2)
       addq.w    #4,A7
; for (i = 0x0; i < 0x08; i++)
       clr.b     D2
EEPROMReadPage_1:
       cmp.b     #8,D2
       bhs.s     EEPROMReadPage_3
; {
; I2C_CMDR = I2C_CTR_RD | I2C_CTR_ACK | I2C_CTR_IACK;
       move.b    #41,4227080
; WaitForSRTIPFlag();
       jsr       (A4)
; I2C_CMDR = I2C_CTR_RD | I2C_CTR_ACK | I2C_CTR_IACK;
       move.b    #41,4227080
; WaitForRxACK();
       jsr       (A3)
; byteRead = I2C_TxRx;
       move.b    4227078,-1(A6)
; printf("%02x ", byteRead);
       move.b    -1(A6),D1
       and.l     #255,D1
       move.l    D1,-(A7)
       pea       @m68kus~1_14.L
       jsr       (A2)
       addq.w    #8,A7
       addq.b    #1,D2
       bra       EEPROMReadPage_1
EEPROMReadPage_3:
; }
; I2C_CMDR = I2C_CTR_STO;
       move.b    #64,4227080
       movem.l   (A7)+,D2/A2/A3/A4
       unlk      A6
       rts
; }
; void main()
; {
_main:
       link      A6,#-8
       move.l    D2,-(A7)
; int i;
; unsigned char byteToWrite, address;
; byteToWrite = 0x12;
       move.b    #18,-1(A6)
; I2C_CMDR = 0x00;
       clr.b     4227080
; I2C_Init();
       jsr       _I2C_Init
; address = 0x13;
       moveq     #19,D2
; EEPROMWriteByte(byteToWrite, 0x00, address);
       ext.w     D2
       ext.l     D2
       move.l    D2,-(A7)
       clr.l     -(A7)
       move.b    -1(A6),D1
       and.l     #255,D1
       move.l    D1,-(A7)
       jsr       _EEPROMWriteByte
       add.w     #12,A7
; EEPROMReadByte(0x00, address);
       and.l     #255,D2
       move.l    D2,-(A7)
       clr.l     -(A7)
       jsr       _EEPROMReadByte
       addq.w    #8,A7
; //EEPROMWritePage(0x00);
; // EEPROMReadByte(0x00, 0x12);
; /*EEPROMReadPage();
; for (i = 0x0; i < 0x80; i++) {
; EEPROMReadByte(0x00, i);
; }*/
; I2C_CTR = 0x00;
       clr.b     4227076
; while (1)
main_1:
; {}
       bra       main_1
; // programs should NOT exit as there is nothing to Exit TO !!!!!!
; // There is no OS - just press the reset button to end program and call debug
; }
_printf:
       link      A6,#-4
       movem.l   D2,-(A7)
       lea       8(A6),A0
       addq.w    #4,A0
       move.l    A0,D2
       move.l    D2,-(A7)
       move.l    8(A6),-(A7)
       clr.l     -(A7)
       bsr       _vsprintf
       add.w     #12,A7
       move.l    D0,-4(A6)
       clr.l     D2
       move.l    -4(A6),D0
       movem.l   (A7)+,D2
       unlk      A6
       rts
@vsprintf_copy:
       link      A6,#0
       move.l    8(A6),A0
       tst.l     (A0)
       beq.s     @vsprintf_copy_1
       move.l    12(A6),D0
       move.l    8(A6),A0
       move.l    (A0),A1
       addq.l    #1,(A0)
       move.b    D0,(A1)
       bra.s     @vsprintf_copy_2
@vsprintf_copy_1:
       move.l    12(A6),-(A7)
       bsr       _putch
       addq.w    #4,A7
@vsprintf_copy_2:
       unlk      A6
       rts
@vsprintf_getval:
       link      A6,#0
       movem.l   D2/D3,-(A7)
       move.l    8(A6),D2
       clr.l     D3
       move.l    D2,A0
       move.l    (A0),A0
       move.b    (A0),D0
       ext.w     D0
       ext.l     D0
       cmp.l     #42,D0
       bne.s     @vsprintf_getval_1
       move.l    12(A6),A0
       move.l    (A0),A1
       addq.l    #4,(A0)
       move.l    (A1),D3
       move.l    D2,A0
       addq.l    #1,(A0)
       bra       @vsprintf_getval_5
@vsprintf_getval_1:
       move.l    D2,A0
       move.l    (A0),A0
       move.b    (A0),D0
       ext.w     D0
       ext.l     D0
       cmp.l     #48,D0
       blt       @vsprintf_getval_5
       move.l    D2,A0
       move.l    (A0),A0
       move.b    (A0),D0
       ext.w     D0
       ext.l     D0
       cmp.l     #57,D0
       bgt.s     @vsprintf_getval_5
       move.l    D3,-(A7)
       pea       10
       bsr       LMUL
       move.l    (A7),D0
       addq.w    #8,A7
       move.l    D2,A0
       move.l    (A0),A1
       addq.l    #1,(A0)
       move.b    (A1),D1
       ext.w     D1
       ext.l     D1
       add.l     D1,D0
       sub.l     #48,D0
       move.l    D0,D3
       bra       @vsprintf_getval_1
@vsprintf_getval_5:
       move.l    D3,D0
       movem.l   (A7)+,D2/D3
       unlk      A6
       rts
_vsprintf:
       link      A6,#-52
       movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
       lea       8(A6),A2
       lea       @vsprintf_copy,A3
       lea       _ultoa,A4
       clr.l     D6
vsprintf_1:
       move.l    12(A6),A0
       tst.b     (A0)
       beq       vsprintf_3
       move.l    12(A6),A0
       move.b    (A0),D0
       ext.w     D0
       ext.l     D0
       cmp.l     #37,D0
       beq.s     vsprintf_4
       move.l    12(A6),A0
       addq.l    #1,12(A6)
       move.b    (A0),D1
       ext.w     D1
       ext.l     D1
       move.l    D1,-(A7)
       move.l    A2,-(A7)
       jsr       (A3)
       addq.w    #8,A7
       addq.l    #1,D6
       bra       vsprintf_2
vsprintf_4:
       addq.l    #1,12(A6)
       clr.b     -45(A6)
       clr.b     -46(A6)
       clr.b     -48(A6)
       clr.b     -49(A6)
       clr.b     -50(A6)
       clr.b     -51(A6)
       clr.l     -4(A6)
       moveq     #-1,D5
       lea       -36(A6),A0
       move.l    A0,D3
       move.l    A0,D2
vsprintf_6:
       move.l    12(A6),A0
       move.b    (A0),D0
       ext.w     D0
       ext.l     D0
       cmp.l     #43,D0
       beq.s     vsprintf_12
       bgt.s     vsprintf_15
       cmp.l     #35,D0
       beq       vsprintf_14
       bgt       vsprintf_9
       cmp.l     #32,D0
       beq.s     vsprintf_13
       bra.s     vsprintf_9
vsprintf_15:
       cmp.l     #45,D0
       beq.s     vsprintf_11
       bra.s     vsprintf_9
vsprintf_11:
       move.b    #1,-51(A6)
       addq.l    #1,12(A6)
       bra.s     vsprintf_7
vsprintf_12:
       move.b    #1,-50(A6)
       addq.l    #1,12(A6)
       bra.s     vsprintf_7
vsprintf_13:
       move.b    #1,-49(A6)
       addq.l    #1,12(A6)
       bra.s     vsprintf_7
vsprintf_14:
       move.b    #1,-48(A6)
       addq.l    #1,12(A6)
       bra.s     vsprintf_7
vsprintf_9:
       bra.s     vsprintf_8
vsprintf_7:
       bra       vsprintf_6
vsprintf_8:
       move.l    12(A6),A0
       move.b    (A0),D0
       ext.w     D0
       ext.l     D0
       cmp.l     #48,D0
       bne.s     vsprintf_16
       addq.l    #1,12(A6)
       move.b    #1,-46(A6)
vsprintf_16:
       pea       16(A6)
       pea       12(A6)
       bsr       @vsprintf_getval
       addq.w    #8,A7
       move.l    D0,A5
       move.l    12(A6),A0
       move.b    (A0),D0
       ext.w     D0
       ext.l     D0
       cmp.l     #46,D0
       bne.s     vsprintf_18
       addq.l    #1,12(A6)
       pea       16(A6)
       pea       12(A6)
       bsr       @vsprintf_getval
       addq.w    #8,A7
       move.l    D0,D5
vsprintf_18:
       move.l    12(A6),A0
       move.b    (A0),D0
       ext.w     D0
       ext.l     D0
       cmp.l     #108,D0
       bne.s     vsprintf_20
       addq.l    #1,12(A6)
       move.b    #1,-45(A6)
vsprintf_20:
       move.l    12(A6),A0
       move.b    (A0),D0
       ext.w     D0
       ext.l     D0
       cmp.l     #111,D0
       beq       vsprintf_27
       bgt.s     vsprintf_33
       cmp.l     #100,D0
       beq       vsprintf_24
       bgt.s     vsprintf_34
       cmp.l     #99,D0
       beq       vsprintf_30
       bgt       vsprintf_22
       cmp.l     #88,D0
       beq       vsprintf_28
       bra       vsprintf_22
vsprintf_34:
       cmp.l     #105,D0
       beq.s     vsprintf_24
       bra       vsprintf_22
vsprintf_33:
       cmp.l     #117,D0
       beq       vsprintf_26
       bgt.s     vsprintf_35
       cmp.l     #115,D0
       beq       vsprintf_31
       bra       vsprintf_22
vsprintf_35:
       cmp.l     #120,D0
       beq       vsprintf_28
       bra       vsprintf_22
vsprintf_24:
       tst.b     -45(A6)
       beq.s     vsprintf_36
       pea       10
       move.l    D3,-(A7)
       move.l    16(A6),A0
       addq.l    #4,16(A6)
       move.l    (A0),-(A7)
       bsr       _ltoa
       add.w     #12,A7
       bra.s     vsprintf_37
vsprintf_36:
       pea       10
       move.l    D3,-(A7)
       move.l    16(A6),A0
       addq.l    #4,16(A6)
       move.l    (A0),-(A7)
       bsr       _ltoa
       add.w     #12,A7
vsprintf_37:
       bra       vsprintf_23
vsprintf_26:
       tst.b     -45(A6)
       beq.s     vsprintf_38
       pea       10
       move.l    D3,-(A7)
       move.l    16(A6),A0
       addq.l    #4,16(A6)
       move.l    (A0),-(A7)
       jsr       (A4)
       add.w     #12,A7
       bra.s     vsprintf_39
vsprintf_38:
       pea       10
       move.l    D3,-(A7)
       move.l    16(A6),A0
       addq.l    #4,16(A6)
       move.l    (A0),-(A7)
       jsr       (A4)
       add.w     #12,A7
vsprintf_39:
       bra       vsprintf_23
vsprintf_27:
       tst.b     -45(A6)
       beq.s     vsprintf_40
       pea       8
       move.l    D3,-(A7)
       move.l    16(A6),A0
       addq.l    #4,16(A6)
       move.l    (A0),-(A7)
       jsr       (A4)
       add.w     #12,A7
       bra.s     vsprintf_41
vsprintf_40:
       pea       8
       move.l    D3,-(A7)
       move.l    16(A6),A0
       addq.l    #4,16(A6)
       move.l    (A0),-(A7)
       jsr       (A4)
       add.w     #12,A7
vsprintf_41:
       bra       vsprintf_23
vsprintf_28:
       tst.b     -45(A6)
       beq.s     vsprintf_42
       pea       16
       move.l    D3,-(A7)
       move.l    16(A6),A0
       addq.l    #4,16(A6)
       move.l    (A0),-(A7)
       jsr       (A4)
       add.w     #12,A7
       bra.s     vsprintf_43
vsprintf_42:
       pea       16
       move.l    D3,-(A7)
       move.l    16(A6),A0
       addq.l    #4,16(A6)
       move.l    (A0),-(A7)
       jsr       (A4)
       add.w     #12,A7
vsprintf_43:
       bra       vsprintf_23
vsprintf_30:
       move.l    16(A6),A0
       addq.l    #4,16(A6)
       move.l    (A0),D0
       move.l    D2,A0
       addq.l    #1,D2
       move.b    D0,(A0)
       move.l    D2,A0
       clr.b     (A0)
       move.l    A5,D0
       beq.s     vsprintf_44
       move.l    A5,D0
       bra.s     vsprintf_45
vsprintf_44:
       moveq     #1,D0
vsprintf_45:
       move.l    D0,D5
       bra       vsprintf_23
vsprintf_31:
       move.l    16(A6),A0
       addq.l    #4,16(A6)
       move.l    (A0),D3
       cmp.l     #-1,D5
       bne.s     vsprintf_46
       move.l    D3,-(A7)
       bsr       _strlen
       addq.w    #4,A7
       move.l    D0,D5
vsprintf_46:
       bra.s     vsprintf_23
vsprintf_22:
       move.l    12(A6),A0
       move.l    D2,A1
       addq.l    #1,D2
       move.b    (A0),(A1)
       move.l    D2,A0
       clr.b     (A0)
vsprintf_23:
       move.l    D3,-(A7)
       bsr       _strlen
       addq.w    #4,A7
       move.b    D0,D4
       move.l    12(A6),A0
       move.b    (A0),D0
       ext.w     D0
       ext.l     D0
       cmp.l     #115,D0
       bne.s     vsprintf_48
       cmp.l     #0,D5
       blt.s     vsprintf_48
       ext.w     D4
       ext.l     D4
       cmp.l     D5,D4
       ble.s     vsprintf_50
       move.b    D5,D0
       bra.s     vsprintf_51
vsprintf_50:
       move.b    D4,D0
vsprintf_51:
       move.b    D0,D4
vsprintf_48:
       move.l    12(A6),A0
       move.b    (A0),D0
       ext.w     D0
       ext.l     D0
       cmp.l     #88,D0
       bne       vsprintf_56
       lea       -36(A6),A0
       move.l    A0,D2
vsprintf_54:
       move.l    D2,A0
       tst.b     (A0)
       beq.s     vsprintf_56
       move.l    D2,A0
       move.b    (A0),D1
       ext.w     D1
       ext.l     D1
       move.l    D1,-(A7)
       bsr       _toupper
       addq.w    #4,A7
       move.l    D2,A0
       move.b    D0,(A0)
       addq.l    #1,D2
       bra       vsprintf_54
vsprintf_56:
       moveq     #0,D7
       lea       -44(A6),A0
       move.l    A0,D2
       move.l    12(A6),A0
       move.b    (A0),D0
       ext.w     D0
       ext.l     D0
       cmp.l     #100,D0
       beq.s     vsprintf_59
       move.l    12(A6),A0
       move.b    (A0),D0
       ext.w     D0
       ext.l     D0
       cmp.l     #105,D0
       bne       vsprintf_65
vsprintf_59:
       tst.b     -50(A6)
       bne.s     vsprintf_62
       move.l    D3,A0
       move.b    (A0),D0
       ext.w     D0
       ext.l     D0
       cmp.l     #45,D0
       bne       vsprintf_60
vsprintf_62:
       move.l    D3,A0
       move.b    (A0),D0
       ext.w     D0
       ext.l     D0
       cmp.l     #45,D0
       bne.s     vsprintf_63
       move.l    D3,A0
       addq.l    #1,D3
       move.l    D2,A1
       addq.l    #1,D2
       move.b    (A0),(A1)
       subq.b    #1,D4
       bra.s     vsprintf_64
vsprintf_63:
       move.l    D2,A0
       addq.l    #1,D2
       move.b    #43,(A0)
vsprintf_64:
       addq.l    #1,D7
       bra       vsprintf_65
vsprintf_60:
       tst.b     -49(A6)
       beq       vsprintf_65
       move.l    D3,A0
       move.b    (A0),D0
       ext.w     D0
       ext.l     D0
       cmp.l     #45,D0
       bne.s     vsprintf_67
       move.l    D3,A0
       addq.l    #1,D3
       move.l    D2,A1
       addq.l    #1,D2
       move.b    (A0),(A1)
       subq.b    #1,D4
       bra.s     vsprintf_68
vsprintf_67:
       move.l    D2,A0
       addq.l    #1,D2
       move.b    #32,(A0)
vsprintf_68:
       addq.l    #1,D7
vsprintf_65:
       tst.b     -48(A6)
       beq       vsprintf_77
       move.l    12(A6),A0
       move.b    (A0),D0
       ext.w     D0
       ext.l     D0
       cmp.l     #111,D0
       beq.s     vsprintf_73
       bgt.s     vsprintf_76
       cmp.l     #88,D0
       beq.s     vsprintf_73
       bra       vsprintf_77
vsprintf_76:
       cmp.l     #120,D0
       beq.s     vsprintf_73
       bra       vsprintf_77
vsprintf_73:
       move.l    D2,A0
       addq.l    #1,D2
       move.b    #48,(A0)
       addq.l    #1,D7
       move.l    12(A6),A0
       move.b    (A0),D0
       ext.w     D0
       ext.l     D0
       cmp.l     #120,D0
       beq.s     vsprintf_79
       move.l    12(A6),A0
       move.b    (A0),D0
       ext.w     D0
       ext.l     D0
       cmp.l     #88,D0
       bne.s     vsprintf_77
vsprintf_79:
       move.l    D2,A0
       addq.l    #1,D2
       move.b    #120,(A0)
       addq.l    #1,D7
vsprintf_77:
       move.l    D2,A0
       clr.b     (A0)
       move.l    12(A6),A0
       move.b    (A0),D0
       ext.w     D0
       ext.l     D0
       cmp.l     #105,D0
       beq       vsprintf_82
       bgt.s     vsprintf_93
       cmp.l     #99,D0
       beq       vsprintf_96
       bgt.s     vsprintf_94
       cmp.l     #88,D0
       beq       vsprintf_82
       bgt       vsprintf_80
       cmp.l     #69,D0
       beq       vsprintf_82
       bra       vsprintf_80
vsprintf_94:
       cmp.l     #101,D0
       beq       vsprintf_82
       bgt       vsprintf_80
       cmp.l     #100,D0
       beq.s     vsprintf_82
       bra       vsprintf_80
vsprintf_93:
       cmp.l     #117,D0
       beq.s     vsprintf_82
       bgt.s     vsprintf_95
       cmp.l     #115,D0
       beq       vsprintf_96
       bgt       vsprintf_80
       cmp.l     #111,D0
       beq.s     vsprintf_82
       bra       vsprintf_80
vsprintf_95:
       cmp.l     #120,D0
       beq.s     vsprintf_82
       bra       vsprintf_80
vsprintf_82:
       tst.b     -46(A6)
       beq.s     vsprintf_96
       tst.b     -51(A6)
       bne.s     vsprintf_96
       move.l    A5,D0
       sub.l     D7,D0
       ext.w     D4
       ext.l     D4
       sub.l     D4,D0
       move.l    D0,-4(A6)
vsprintf_96:
       move.l    -4(A6),D0
       cmp.l     #0,D0
       bge.s     vsprintf_98
       clr.l     -4(A6)
vsprintf_98:
       tst.b     -51(A6)
       bne       vsprintf_104
       ext.w     D4
       ext.l     D4
       move.l    D4,D0
       add.l     -4(A6),D0
       add.l     D7,D0
       move.b    D0,-47(A6)
vsprintf_102:
       move.b    -47(A6),D0
       ext.w     D0
       ext.l     D0
       move.l    A5,D1
       subq.w    #1,A5
       cmp.l     D1,D0
       bge.s     vsprintf_104
       pea       32
       move.l    A2,-(A7)
       jsr       (A3)
       addq.w    #8,A7
       addq.l    #1,D6
       bra       vsprintf_102
vsprintf_104:
       lea       -44(A6),A0
       move.l    A0,D2
vsprintf_105:
       move.l    D2,A0
       tst.b     (A0)
       beq.s     vsprintf_107
       move.l    D2,A0
       addq.l    #1,D2
       move.b    (A0),D1
       ext.w     D1
       ext.l     D1
       move.l    D1,-(A7)
       move.l    A2,-(A7)
       jsr       (A3)
       addq.w    #8,A7
       addq.l    #1,D6
       bra       vsprintf_105
vsprintf_107:
       move.l    -4(A6),D0
       move.b    D0,-47(A6)
vsprintf_108:
       move.b    -47(A6),D0
       subq.b    #1,-47(A6)
       tst.b     D0
       beq.s     vsprintf_110
       pea       48
       move.l    A2,-(A7)
       jsr       (A3)
       addq.w    #8,A7
       addq.l    #1,D6
       bra       vsprintf_108
vsprintf_110:
       move.l    D3,A0
       tst.b     (A0)
       beq       vsprintf_113
       move.l    12(A6),A0
       move.b    (A0),D0
       ext.w     D0
       ext.l     D0
       cmp.l     #115,D0
       beq.s     vsprintf_116
       bgt.s     vsprintf_119
       cmp.l     #99,D0
       beq.s     vsprintf_116
       bra.s     vsprintf_119
vsprintf_116:
       move.l    D5,D0
       subq.l    #1,D5
       cmp.l     #0,D0
       bgt.s     vsprintf_119
       bra.s     vsprintf_115
vsprintf_119:
       move.l    D3,A0
       addq.l    #1,D3
       move.b    (A0),D1
       ext.w     D1
       ext.l     D1
       move.l    D1,-(A7)
       move.l    A2,-(A7)
       jsr       (A3)
       addq.w    #8,A7
       addq.l    #1,D6
       bra.s     vsprintf_112
vsprintf_115:
       bra.s     vsprintf_113
vsprintf_112:
       bra       vsprintf_110
vsprintf_113:
       tst.b     -51(A6)
       beq       vsprintf_125
       ext.w     D4
       ext.l     D4
       move.l    D4,D0
       add.l     -4(A6),D0
       add.l     D7,D0
       move.b    D0,-47(A6)
vsprintf_123:
       move.b    -47(A6),D0
       ext.w     D0
       ext.l     D0
       move.l    A5,D1
       subq.w    #1,A5
       cmp.l     D1,D0
       bge.s     vsprintf_125
       pea       32
       move.l    A2,-(A7)
       jsr       (A3)
       addq.w    #8,A7
       subq.l    #1,D6
       bra       vsprintf_123
vsprintf_125:
       bra.s     vsprintf_81
vsprintf_80:
       move.l    12(A6),A0
       move.b    (A0),D1
       ext.w     D1
       ext.l     D1
       move.l    D1,-(A7)
       move.l    A2,-(A7)
       jsr       (A3)
       addq.w    #8,A7
       addq.l    #1,D6
vsprintf_81:
       addq.l    #1,12(A6)
vsprintf_2:
       bra       vsprintf_1
vsprintf_3:
       tst.l     (A2)
       beq.s     vsprintf_126
       clr.b     D1
       and.l     #255,D1
       move.l    D1,-(A7)
       move.l    A2,-(A7)
       jsr       (A3)
       addq.w    #8,A7
vsprintf_126:
       move.l    D6,D0
       movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
       unlk      A6
       rts
@itoa_convert:
       link      A6,#0
       movem.l   D2/D3/D4/D5,-(A7)
       move.l    8(A6),D2
       move.l    16(A6),D3
       move.l    12(A6),D5
       move.l    D5,-(A7)
       move.l    D3,-(A7)
       bsr       ULDIV
       move.l    4(A7),D0
       addq.w    #8,A7
       move.l    D0,D4
       cmp.l     D3,D5
       blo.s     @itoa_convert_1
       move.l    D3,-(A7)
       move.l    D5,-(A7)
       move.l    D3,-(A7)
       bsr       ULDIV
       move.l    (A7),D1
       addq.w    #8,A7
       move.l    D1,-(A7)
       move.l    D2,-(A7)
       bsr       @itoa_convert
       add.w     #12,A7
       move.l    D0,D2
@itoa_convert_1:
       cmp.l     #9,D4
       bgt.s     @itoa_convert_3
       move.l    D4,D0
       add.l     #48,D0
       bra.s     @itoa_convert_4
@itoa_convert_3:
       move.l    D4,D0
       add.l     #97,D0
       sub.l     #10,D0
@itoa_convert_4:
       move.l    D2,A0
       move.b    D0,(A0)
       move.l    D2,D0
       addq.l    #1,D0
       movem.l   (A7)+,D2/D3/D4/D5
       unlk      A6
       rts
_ltoa:
       link      A6,#0
       movem.l   D2/D3/D4/D5,-(A7)
       move.l    8(A6),D2
       move.l    12(A6),D3
       move.l    16(A6),D5
       move.l    D3,D4
       cmp.l     #2,D5
       blt.s     ltoa_3
       cmp.l     #36,D5
       ble.s     ltoa_1
ltoa_3:
       move.l    D3,D0
       bra       ltoa_4
ltoa_1:
       cmp.l     #10,D5
       bne       ltoa_5
       cmp.l     #0,D2
       bge.s     ltoa_5
       move.l    D2,D0
       neg.l     D0
       move.l    D0,D2
       cmp.l     #0,D2
       bge.s     ltoa_7
       pea       @itoa_1
       move.l    D3,-(A7)
       bsr       _strcpy
       addq.w    #8,A7
       move.l    D3,D0
       bra.s     ltoa_4
ltoa_7:
       move.l    D4,A0
       addq.l    #1,D4
       move.b    #45,(A0)
ltoa_5:
       move.l    D5,-(A7)
       move.l    D2,-(A7)
       move.l    D4,-(A7)
       bsr       @itoa_convert
       add.w     #12,A7
       move.l    D0,D4
       move.l    D4,A0
       clr.b     (A0)
       move.l    D3,D0
ltoa_4:
       movem.l   (A7)+,D2/D3/D4/D5
       unlk      A6
       rts
_ultoa:
       link      A6,#0
       movem.l   D2/D3/D4,-(A7)
       move.l    16(A6),D3
       move.l    12(A6),D4
       move.l    D4,D2
       cmp.l     #2,D3
       blt.s     ultoa_3
       cmp.l     #36,D3
       ble.s     ultoa_1
ultoa_3:
       move.l    D4,D0
       bra.s     ultoa_4
ultoa_1:
       move.l    D3,-(A7)
       move.l    8(A6),-(A7)
       move.l    D2,-(A7)
       bsr       @itoa_convert
       add.w     #12,A7
       move.l    D0,D2
       move.l    D2,A0
       clr.b     (A0)
       move.l    D4,D0
ultoa_4:
       movem.l   (A7)+,D2/D3/D4
       unlk      A6
       rts
_itoa:
       link      A6,#0
       move.l    16(A6),-(A7)
       move.l    12(A6),-(A7)
       move.l    8(A6),-(A7)
       bsr       _ltoa
       add.w     #12,A7
       unlk      A6
       rts
ULMUL:
       link    A6,#0
       movem.l D0/D1,-(A7)
       move.l  8(A6),D1
       move.l  12(A6),D0
       bra.s   lmul_3
LMUL:
       link    A6,#0
       movem.l D0/D1,-(A7)
       move.l  8(A6),D1
       move.l  12(A6),D0
       tst.l   D0
       bpl.s   lmul_1
       neg.l   D0
       tst.l   D1
       bpl.s   lmul_2
       neg.l   D1
       bra.s   lmul_3
lmul_1:
       tst.l   D1
       bpl.s   lmul_3
       neg.l   D1
lmul_2:
       bsr.s   domul
       neg.l   D1
       negx.l  D0
       bra.s   lmul_4
lmul_3:
       bsr.s   domul
lmul_4:
       move.l  D1,8(A6)
       movem.l (A7)+,D0/D1
       unlk    A6
       rts
domul:
       cmpi.l  #$FFFF,D1
       bhi.s   domul_1
       cmpi.l  #$FFFF,D0
       bhi.s   domul_2
       mulu    D0,D1
       rts
domul_1:
       cmpi.l  #$FFFF,D0
       bhi.s   domul_4
       bra.s   domul_3
domul_2
       exg     D0,D1
domul_3:
       move.l  D2,-(A7)
       move.l  D1,D2
       swap    D2
       mulu    D0,D1
       mulu    D0,D2
       swap    D2
       clr.w   D2
       add.l   D2,D1
       move.l  (A7)+,D2
       rts
domul_4:
       movem.l D2/D3,-(A7)
       move.l  D1,D2
       move.l  D1,D3
       mulu    D0,D1
       swap    D2
       mulu    D0,D2
       swap    D0
       mulu    D0,D3
       add.l   D3,D2
       swap    D2
       clr.w   D2
       add.l   D2,D1
       movem.l (A7)+,D2/D3
       rts
_strlen:
       move.l    (4,A7),A0
       move.l    A0,A1
strlen_1:
       tst.b     (A1)+
       bne       strlen_1
       move.l    A1,D0
       sub.l     A0,D0
       subq.l    #1,D0
       rts
_putch:
       link      A6,#0
       movem.l   D2,-(A7)
       move.l    8(A6),D2
       cmp.l     #10,D2
       bne.s     putch_1
       pea       13
       bsr       __putch
       addq.w    #4,A7
putch_1:
       move.l    D2,-(A7)
       bsr       __putch
       addq.w    #4,A7
       move.l    D2,D0
       movem.l   (A7)+,D2
       unlk      A6
       rts
_toupper:
       link      A6,#0
       movem.l   D2,-(A7)
       move.l    8(A6),D2
       cmp.l     #97,D2
       blt.s     toupper_1
       cmp.l     #122,D2
       bgt.s     toupper_1
       and.l     #95,D2
toupper_1:
       move.l    D2,D0
       movem.l   (A7)+,D2
       unlk      A6
       rts
_strcpy:
       move.l    (4,A7),A0
       move.l    (8,A7),A1
       move.l    A0,D0
strcpy_1:
       move.b    (A1)+,(A0)+
       bne       strcpy_1
       rts
ULDIV:
       link    A6,#0
       movem.l D0/D1,-(A7)
       move.l  8(A6),D1
       move.l  12(A6),D0
       bra.s   ldiv_3
LDIV:
       link    A6,#0
       movem.l D0/D1,-(A7)
       move.l  8(A6),D1
       move.l  12(A6),D0
       tst.l   D0
       bpl.s   ldiv_1
       neg.l   D0
       tst.l   D1
       bpl.s   ldiv_2
       neg.l   D1
       bsr.s   dodiv
       neg.l   D1
       bra.s   ldiv_4
ldiv_1:
       tst.l   D1
       bpl.s   ldiv_3
       neg.l   D1
       bsr.s   dodiv
       neg.l   D0
       bra.s   ldiv_4
ldiv_2:
       bsr.s   dodiv
       neg.l   D0
       neg.l   D1
       bra.s   ldiv_4
ldiv_3:
       bsr.s   dodiv
ldiv_4:
       move.l  D0,8(A6)
       move.l  D1,12(A6)
       movem.l (A7)+,D0/D1
       unlk    A6
       rts
dodiv:
       cmpi.l  #$FFFF,D1
       bhi.s   dodiv_2
       cmpi.l  #$FFFF,D0
       bhi.s   dodiv_1
       divu    D1,D0
       move.l  D0,D1
       clr.w   D1
       swap    D1
       andi.l  #$FFFF,D0
       rts
dodiv_1:
       movem.w D0/D2,-(A7)
       clr.w   D0
       swap    D0
       divu    D1,D0
       move.w  D0,D2
       move.w  (A7)+,D0
       divu    D1,D0
       swap    D0
       clr.l   D1
       move.w  D0,D1
       move.w  D2,D0
       swap    D0
       move.w  (A7)+,D2
       rts
dodiv_2:
       movem.l D2/D3/D4,-(A7)
       move.l  D1,D2
       clr.w   D2
       swap    D2
       addq.l  #1,D2
       move.l  D0,D3
       move.l  D1,D4
       move.l  D2,D1
       bsr.s   dodiv_1
       move.l  D4,D1
       divu    D2,D1
       divu    D1,D0
       andi.l  #$FFFF,D0
dodiv_3:
       move.l  D4,D1
       move.l  D4,D2
       swap    D2
       mulu    D0,D1
       mulu    D0,D2
       swap    D2
       add.l   D2,D1
       sub.l   D3,D1
       bhi.s   dodiv_4
       neg.l   D1
       cmp.l   D1,D4
       bhi.s   dodiv_5
       addq.l  #1,D0
       bra.s   dodiv_3
dodiv_4:
       subq.l  #1,D0
       bra.s   dodiv_3
dodiv_5:
       movem.l (A7)+,D2/D3/D4
       rts
       section   const
                align


@m68kus~1_1:
       dc.b      13,10,68,101,118,105,99,101,32,105,115,32,110
       dc.b      111,116,32,114,101,97,100,121,0
@m68kus~1_2:
       dc.b      13,10,68,101,118,105,99,101,32,105,115,32,114
       dc.b      101,97,100,121,0
@m68kus~1_3:
       dc.b      13,10,32,83,101,110,116,32,99,111,110,116,114
       dc.b      111,108,32,98,121,116,101,0
@m68kus~1_4:
       dc.b      13,10,32,83,101,110,116,32,97,100,100,114,101
       dc.b      115,115,32,98,121,116,101,115,0
@m68kus~1_5:
       dc.b      13,10,68,101,118,105,99,101,32,110,111,116,32
       dc.b      114,101,97,100,121,0
@m68kus~1_6:
       dc.b      13,10,68,101,118,105,99,101,32,114,101,97,100
       dc.b      121,0
@m68kus~1_7:
       dc.b      13,10,32,73,50,67,95,67,77,68,82,58,32,48,120
       dc.b      48,50,0
@m68kus~1_8:
       dc.b      13,10,83,101,110,116,32,67,111,110,116,114,111
       dc.b      108,32,98,121,116,101,0
@m68kus~1_9:
       dc.b      13,10,83,101,110,116,32,49,115,116,32,97,100
       dc.b      100,114,101,115,115,0
@m68kus~1_10:
       dc.b      13,10,83,101,110,116,32,50,110,100,32,97,100
       dc.b      100,114,101,115,115,0
@m68kus~1_11:
       dc.b      13,10,82,101,97,100,58,32,37,48,50,120,32,102
       dc.b      114,111,109,32,97,100,100,114,101,115,115,32
       dc.b      37,48,50,120,13,10,0
@m68kus~1_12:
       dc.b      13,10,32,83,101,110,116,32,115,116,111,112,32
       dc.b      99,111,109,109,97,110,100,0
@m68kus~1_13:
       dc.b      13,10,83,101,110,116,32,115,101,99,111,110,100
       dc.b      32,99,111,110,116,114,111,108,32,98,121,116
       dc.b      101,10,0
@m68kus~1_14:
       dc.b      37,48,50,120,32,0
       section   data
                align

*********************************************************************************************************************************************************
* Section for Initialised Data (in theory should be copied to Ram at startup) but is part of program code as we copy whole program to ram at startup
********************************************************************************************************************************************************

DataStart       equ       *
__ungetbuf:     ds.l      1                    ungetbuffer for stdio functions
__allocp:       ds.l      1                    start of free memory block list
__heap:         ds.l      1                    begin of free memory


@itoa_1:
       dc.b      45,50,49,52,55,52,56,51,54,52,56,0
       section   bss
                align

DataEnd         equ       *                    this label will equate to the address of the last byte of global variable in it
DataLength      equ       DataEnd-DataStart    length of data needed to copy to Ram on bootup

*********************************************************************************************************
* Section for uninitialised Data which is set to zero, i.e. we should set this space to zero at starup
*********************************************************************************************************
BssStart       equ       *

       section   heap
               align

BssEnd         equ       *
BssLength      equ       BssEnd-BssStart       length of zeroed data needed to copy to Ram on bootup

*********************************************************************************************************
* Section for Heap
*********************************************************************************************************

heap           equ       *
               align
